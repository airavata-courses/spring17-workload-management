/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.cloud.aurora.client.sdk;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

// TODO: Auto-generated Javadoc
/**
 * The Class AuroraAdmin.
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2016-10-21")
public class AuroraAdmin {

  /**
   * The Interface Iface.
   */
  public interface Iface extends AuroraSchedulerManager.Iface {

    /**
     * Assign quota to a user.  This will overwrite any pre-existing quota for the user.
     *
     * @param ownerRole the owner role
     * @param quota the quota
     * @return the response
     * @throws TException the t exception
     */
    public Response setQuota(String ownerRole, ResourceAggregate quota) throws org.apache.thrift.TException;

    /**
     * Forces a task into a specific state.  This does not guarantee the task will enter the given
     * state, as the task must still transition within the bounds of the state machine.  However,
     * it attempts to enter that state via the state machine.
     *
     * @param taskId the task id
     * @param status the status
     * @return the response
     * @throws TException the t exception
     */
    public Response forceTaskState(String taskId, ScheduleStatus status) throws org.apache.thrift.TException;

    /**
     * Immediately writes a storage snapshot to disk.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response performBackup() throws org.apache.thrift.TException;

    /**
     * Lists backups that are available for recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response listBackups() throws org.apache.thrift.TException;

    /**
     * Loads a backup to an in-memory storage.  This must precede all other recovery operations.
     *
     * @param backupId the backup id
     * @return the response
     * @throws TException the t exception
     */
    public Response stageRecovery(String backupId) throws org.apache.thrift.TException;

    /**
     * Queries for tasks in a staged recovery.
     *
     * @param query the query
     * @return the response
     * @throws TException the t exception
     */
    public Response queryRecovery(TaskQuery query) throws org.apache.thrift.TException;

    /**
     * Deletes tasks from a staged recovery.
     *
     * @param query the query
     * @return the response
     * @throws TException the t exception
     */
    public Response deleteRecoveryTasks(TaskQuery query) throws org.apache.thrift.TException;

    /**
     * Commits a staged recovery, completely replacing the previous storage state.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response commitRecovery() throws org.apache.thrift.TException;

    /**
     * Unloads (aborts) a staged recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response unloadRecovery() throws org.apache.thrift.TException;

    /**
     * Put the given hosts into maintenance mode.
     *
     * @param hosts the hosts
     * @return the response
     * @throws TException the t exception
     */
    public Response startMaintenance(Hosts hosts) throws org.apache.thrift.TException;

    /**
     * Ask scheduler to begin moving tasks scheduled on given hosts.
     *
     * @param hosts the hosts
     * @return the response
     * @throws TException the t exception
     */
    public Response drainHosts(Hosts hosts) throws org.apache.thrift.TException;

    /**
     * Retrieve the current maintenance states for a group of hosts.
     *
     * @param hosts the hosts
     * @return the response
     * @throws TException the t exception
     */
    public Response maintenanceStatus(Hosts hosts) throws org.apache.thrift.TException;

    /**
     * Set the given hosts back into serving mode.
     *
     * @param hosts the hosts
     * @return the response
     * @throws TException the t exception
     */
    public Response endMaintenance(Hosts hosts) throws org.apache.thrift.TException;

    /**
     * Start a storage snapshot and block until it completes.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response snapshot() throws org.apache.thrift.TException;

    /**
     * Forcibly rewrites the stored definition of user configurations.  This is intended to be used
     * in a controlled setting, primarily to migrate pieces of configurations that are opaque to the
     * scheduler (e.g. executorConfig).
     * The scheduler may do some validation of the rewritten configurations, but it is important
     * that the caller take care to provide valid input and alter only necessary fields.
     *
     * @param request the request
     * @return the response
     * @throws TException the t exception
     */
    public Response rewriteConfigs(RewriteConfigsRequest request) throws org.apache.thrift.TException;

    /**
     * Tell scheduler to trigger an explicit task reconciliation with the given settings.
     *
     * @param settings the settings
     * @return the response
     * @throws TException the t exception
     */
    public Response triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings) throws org.apache.thrift.TException;

    /**
     * Tell scheduler to trigger an implicit task reconciliation.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response triggerImplicitTaskReconciliation() throws org.apache.thrift.TException;

  }

  /**
   * The Interface AsyncIface.
   */
  public interface AsyncIface extends AuroraSchedulerManager .AsyncIface {

    /**
     * Sets the quota.
     *
     * @param ownerRole the owner role
     * @param quota the quota
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void setQuota(String ownerRole, ResourceAggregate quota, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Force task state.
     *
     * @param taskId the task id
     * @param status the status
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void forceTaskState(String taskId, ScheduleStatus status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Perform backup.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void performBackup(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * List backups.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void listBackups(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Stage recovery.
     *
     * @param backupId the backup id
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void stageRecovery(String backupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Query recovery.
     *
     * @param query the query
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void queryRecovery(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Delete recovery tasks.
     *
     * @param query the query
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void deleteRecoveryTasks(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Commit recovery.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void commitRecovery(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Unload recovery.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void unloadRecovery(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Start maintenance.
     *
     * @param hosts the hosts
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void startMaintenance(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Drain hosts.
     *
     * @param hosts the hosts
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void drainHosts(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Maintenance status.
     *
     * @param hosts the hosts
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void maintenanceStatus(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * End maintenance.
     *
     * @param hosts the hosts
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void endMaintenance(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Snapshot.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void snapshot(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Rewrite configs.
     *
     * @param request the request
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void rewriteConfigs(RewriteConfigsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Trigger explicit task reconciliation.
     *
     * @param settings the settings
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    /**
     * Trigger implicit task reconciliation.
     *
     * @param resultHandler the result handler
     * @throws TException the t exception
     */
    public void triggerImplicitTaskReconciliation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  /**
   * The Class Client.
   */
  public static class Client extends AuroraSchedulerManager.Client implements Iface {
    
    /**
     * The Class Factory.
     */
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      
      /**
       * Instantiates a new factory.
       */
      public Factory() {}
      
      /* (non-Javadoc)
       * @see org.apache.thrift.TServiceClientFactory#getClient(org.apache.thrift.protocol.TProtocol)
       */
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      
      /* (non-Javadoc)
       * @see org.apache.thrift.TServiceClientFactory#getClient(org.apache.thrift.protocol.TProtocol, org.apache.thrift.protocol.TProtocol)
       */
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    /**
     * Instantiates a new client.
     *
     * @param prot the prot
     */
    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    /**
     * Instantiates a new client.
     *
     * @param iprot the iprot
     * @param oprot the oprot
     */
    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#setQuota(java.lang.String, org.apache.airavata.cloud.aurora.client.sdk.ResourceAggregate)
     */
    public Response setQuota(String ownerRole, ResourceAggregate quota) throws org.apache.thrift.TException
    {
      send_setQuota(ownerRole, quota);
      return recv_setQuota();
    }

    /**
     * Send set quota.
     *
     * @param ownerRole the owner role
     * @param quota the quota
     * @throws TException the t exception
     */
    public void send_setQuota(String ownerRole, ResourceAggregate quota) throws org.apache.thrift.TException
    {
      setQuota_args args = new setQuota_args();
      args.setOwnerRole(ownerRole);
      args.setQuota(quota);
      sendBase("setQuota", args);
    }

    /**
     * Recv set quota.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_setQuota() throws org.apache.thrift.TException
    {
      setQuota_result result = new setQuota_result();
      receiveBase(result, "setQuota");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setQuota failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#forceTaskState(java.lang.String, org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus)
     */
    public Response forceTaskState(String taskId, ScheduleStatus status) throws org.apache.thrift.TException
    {
      send_forceTaskState(taskId, status);
      return recv_forceTaskState();
    }

    /**
     * Send force task state.
     *
     * @param taskId the task id
     * @param status the status
     * @throws TException the t exception
     */
    public void send_forceTaskState(String taskId, ScheduleStatus status) throws org.apache.thrift.TException
    {
      forceTaskState_args args = new forceTaskState_args();
      args.setTaskId(taskId);
      args.setStatus(status);
      sendBase("forceTaskState", args);
    }

    /**
     * Recv force task state.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_forceTaskState() throws org.apache.thrift.TException
    {
      forceTaskState_result result = new forceTaskState_result();
      receiveBase(result, "forceTaskState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "forceTaskState failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#performBackup()
     */
    public Response performBackup() throws org.apache.thrift.TException
    {
      send_performBackup();
      return recv_performBackup();
    }

    /**
     * Send perform backup.
     *
     * @throws TException the t exception
     */
    public void send_performBackup() throws org.apache.thrift.TException
    {
      performBackup_args args = new performBackup_args();
      sendBase("performBackup", args);
    }

    /**
     * Recv perform backup.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_performBackup() throws org.apache.thrift.TException
    {
      performBackup_result result = new performBackup_result();
      receiveBase(result, "performBackup");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "performBackup failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#listBackups()
     */
    public Response listBackups() throws org.apache.thrift.TException
    {
      send_listBackups();
      return recv_listBackups();
    }

    /**
     * Send list backups.
     *
     * @throws TException the t exception
     */
    public void send_listBackups() throws org.apache.thrift.TException
    {
      listBackups_args args = new listBackups_args();
      sendBase("listBackups", args);
    }

    /**
     * Recv list backups.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_listBackups() throws org.apache.thrift.TException
    {
      listBackups_result result = new listBackups_result();
      receiveBase(result, "listBackups");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "listBackups failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#stageRecovery(java.lang.String)
     */
    public Response stageRecovery(String backupId) throws org.apache.thrift.TException
    {
      send_stageRecovery(backupId);
      return recv_stageRecovery();
    }

    /**
     * Send stage recovery.
     *
     * @param backupId the backup id
     * @throws TException the t exception
     */
    public void send_stageRecovery(String backupId) throws org.apache.thrift.TException
    {
      stageRecovery_args args = new stageRecovery_args();
      args.setBackupId(backupId);
      sendBase("stageRecovery", args);
    }

    /**
     * Recv stage recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_stageRecovery() throws org.apache.thrift.TException
    {
      stageRecovery_result result = new stageRecovery_result();
      receiveBase(result, "stageRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "stageRecovery failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#queryRecovery(org.apache.airavata.cloud.aurora.client.sdk.TaskQuery)
     */
    public Response queryRecovery(TaskQuery query) throws org.apache.thrift.TException
    {
      send_queryRecovery(query);
      return recv_queryRecovery();
    }

    /**
     * Send query recovery.
     *
     * @param query the query
     * @throws TException the t exception
     */
    public void send_queryRecovery(TaskQuery query) throws org.apache.thrift.TException
    {
      queryRecovery_args args = new queryRecovery_args();
      args.setQuery(query);
      sendBase("queryRecovery", args);
    }

    /**
     * Recv query recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_queryRecovery() throws org.apache.thrift.TException
    {
      queryRecovery_result result = new queryRecovery_result();
      receiveBase(result, "queryRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryRecovery failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#deleteRecoveryTasks(org.apache.airavata.cloud.aurora.client.sdk.TaskQuery)
     */
    public Response deleteRecoveryTasks(TaskQuery query) throws org.apache.thrift.TException
    {
      send_deleteRecoveryTasks(query);
      return recv_deleteRecoveryTasks();
    }

    /**
     * Send delete recovery tasks.
     *
     * @param query the query
     * @throws TException the t exception
     */
    public void send_deleteRecoveryTasks(TaskQuery query) throws org.apache.thrift.TException
    {
      deleteRecoveryTasks_args args = new deleteRecoveryTasks_args();
      args.setQuery(query);
      sendBase("deleteRecoveryTasks", args);
    }

    /**
     * Recv delete recovery tasks.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_deleteRecoveryTasks() throws org.apache.thrift.TException
    {
      deleteRecoveryTasks_result result = new deleteRecoveryTasks_result();
      receiveBase(result, "deleteRecoveryTasks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteRecoveryTasks failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#commitRecovery()
     */
    public Response commitRecovery() throws org.apache.thrift.TException
    {
      send_commitRecovery();
      return recv_commitRecovery();
    }

    /**
     * Send commit recovery.
     *
     * @throws TException the t exception
     */
    public void send_commitRecovery() throws org.apache.thrift.TException
    {
      commitRecovery_args args = new commitRecovery_args();
      sendBase("commitRecovery", args);
    }

    /**
     * Recv commit recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_commitRecovery() throws org.apache.thrift.TException
    {
      commitRecovery_result result = new commitRecovery_result();
      receiveBase(result, "commitRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "commitRecovery failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#unloadRecovery()
     */
    public Response unloadRecovery() throws org.apache.thrift.TException
    {
      send_unloadRecovery();
      return recv_unloadRecovery();
    }

    /**
     * Send unload recovery.
     *
     * @throws TException the t exception
     */
    public void send_unloadRecovery() throws org.apache.thrift.TException
    {
      unloadRecovery_args args = new unloadRecovery_args();
      sendBase("unloadRecovery", args);
    }

    /**
     * Recv unload recovery.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_unloadRecovery() throws org.apache.thrift.TException
    {
      unloadRecovery_result result = new unloadRecovery_result();
      receiveBase(result, "unloadRecovery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "unloadRecovery failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#startMaintenance(org.apache.airavata.cloud.aurora.client.sdk.Hosts)
     */
    public Response startMaintenance(Hosts hosts) throws org.apache.thrift.TException
    {
      send_startMaintenance(hosts);
      return recv_startMaintenance();
    }

    /**
     * Send start maintenance.
     *
     * @param hosts the hosts
     * @throws TException the t exception
     */
    public void send_startMaintenance(Hosts hosts) throws org.apache.thrift.TException
    {
      startMaintenance_args args = new startMaintenance_args();
      args.setHosts(hosts);
      sendBase("startMaintenance", args);
    }

    /**
     * Recv start maintenance.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_startMaintenance() throws org.apache.thrift.TException
    {
      startMaintenance_result result = new startMaintenance_result();
      receiveBase(result, "startMaintenance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "startMaintenance failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#drainHosts(org.apache.airavata.cloud.aurora.client.sdk.Hosts)
     */
    public Response drainHosts(Hosts hosts) throws org.apache.thrift.TException
    {
      send_drainHosts(hosts);
      return recv_drainHosts();
    }

    /**
     * Send drain hosts.
     *
     * @param hosts the hosts
     * @throws TException the t exception
     */
    public void send_drainHosts(Hosts hosts) throws org.apache.thrift.TException
    {
      drainHosts_args args = new drainHosts_args();
      args.setHosts(hosts);
      sendBase("drainHosts", args);
    }

    /**
     * Recv drain hosts.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_drainHosts() throws org.apache.thrift.TException
    {
      drainHosts_result result = new drainHosts_result();
      receiveBase(result, "drainHosts");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "drainHosts failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#maintenanceStatus(org.apache.airavata.cloud.aurora.client.sdk.Hosts)
     */
    public Response maintenanceStatus(Hosts hosts) throws org.apache.thrift.TException
    {
      send_maintenanceStatus(hosts);
      return recv_maintenanceStatus();
    }

    /**
     * Send maintenance status.
     *
     * @param hosts the hosts
     * @throws TException the t exception
     */
    public void send_maintenanceStatus(Hosts hosts) throws org.apache.thrift.TException
    {
      maintenanceStatus_args args = new maintenanceStatus_args();
      args.setHosts(hosts);
      sendBase("maintenanceStatus", args);
    }

    /**
     * Recv maintenance status.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_maintenanceStatus() throws org.apache.thrift.TException
    {
      maintenanceStatus_result result = new maintenanceStatus_result();
      receiveBase(result, "maintenanceStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "maintenanceStatus failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#endMaintenance(org.apache.airavata.cloud.aurora.client.sdk.Hosts)
     */
    public Response endMaintenance(Hosts hosts) throws org.apache.thrift.TException
    {
      send_endMaintenance(hosts);
      return recv_endMaintenance();
    }

    /**
     * Send end maintenance.
     *
     * @param hosts the hosts
     * @throws TException the t exception
     */
    public void send_endMaintenance(Hosts hosts) throws org.apache.thrift.TException
    {
      endMaintenance_args args = new endMaintenance_args();
      args.setHosts(hosts);
      sendBase("endMaintenance", args);
    }

    /**
     * Recv end maintenance.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_endMaintenance() throws org.apache.thrift.TException
    {
      endMaintenance_result result = new endMaintenance_result();
      receiveBase(result, "endMaintenance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "endMaintenance failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#snapshot()
     */
    public Response snapshot() throws org.apache.thrift.TException
    {
      send_snapshot();
      return recv_snapshot();
    }

    /**
     * Send snapshot.
     *
     * @throws TException the t exception
     */
    public void send_snapshot() throws org.apache.thrift.TException
    {
      snapshot_args args = new snapshot_args();
      sendBase("snapshot", args);
    }

    /**
     * Recv snapshot.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_snapshot() throws org.apache.thrift.TException
    {
      snapshot_result result = new snapshot_result();
      receiveBase(result, "snapshot");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "snapshot failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#rewriteConfigs(org.apache.airavata.cloud.aurora.client.sdk.RewriteConfigsRequest)
     */
    public Response rewriteConfigs(RewriteConfigsRequest request) throws org.apache.thrift.TException
    {
      send_rewriteConfigs(request);
      return recv_rewriteConfigs();
    }

    /**
     * Send rewrite configs.
     *
     * @param request the request
     * @throws TException the t exception
     */
    public void send_rewriteConfigs(RewriteConfigsRequest request) throws org.apache.thrift.TException
    {
      rewriteConfigs_args args = new rewriteConfigs_args();
      args.setRequest(request);
      sendBase("rewriteConfigs", args);
    }

    /**
     * Recv rewrite configs.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_rewriteConfigs() throws org.apache.thrift.TException
    {
      rewriteConfigs_result result = new rewriteConfigs_result();
      receiveBase(result, "rewriteConfigs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rewriteConfigs failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#triggerExplicitTaskReconciliation(org.apache.airavata.cloud.aurora.client.sdk.ExplicitReconciliationSettings)
     */
    public Response triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings) throws org.apache.thrift.TException
    {
      send_triggerExplicitTaskReconciliation(settings);
      return recv_triggerExplicitTaskReconciliation();
    }

    /**
     * Send trigger explicit task reconciliation.
     *
     * @param settings the settings
     * @throws TException the t exception
     */
    public void send_triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings) throws org.apache.thrift.TException
    {
      triggerExplicitTaskReconciliation_args args = new triggerExplicitTaskReconciliation_args();
      args.setSettings(settings);
      sendBase("triggerExplicitTaskReconciliation", args);
    }

    /**
     * Recv trigger explicit task reconciliation.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_triggerExplicitTaskReconciliation() throws org.apache.thrift.TException
    {
      triggerExplicitTaskReconciliation_result result = new triggerExplicitTaskReconciliation_result();
      receiveBase(result, "triggerExplicitTaskReconciliation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "triggerExplicitTaskReconciliation failed: unknown result");
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.Iface#triggerImplicitTaskReconciliation()
     */
    public Response triggerImplicitTaskReconciliation() throws org.apache.thrift.TException
    {
      send_triggerImplicitTaskReconciliation();
      return recv_triggerImplicitTaskReconciliation();
    }

    /**
     * Send trigger implicit task reconciliation.
     *
     * @throws TException the t exception
     */
    public void send_triggerImplicitTaskReconciliation() throws org.apache.thrift.TException
    {
      triggerImplicitTaskReconciliation_args args = new triggerImplicitTaskReconciliation_args();
      sendBase("triggerImplicitTaskReconciliation", args);
    }

    /**
     * Recv trigger implicit task reconciliation.
     *
     * @return the response
     * @throws TException the t exception
     */
    public Response recv_triggerImplicitTaskReconciliation() throws org.apache.thrift.TException
    {
      triggerImplicitTaskReconciliation_result result = new triggerImplicitTaskReconciliation_result();
      receiveBase(result, "triggerImplicitTaskReconciliation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "triggerImplicitTaskReconciliation failed: unknown result");
    }

  }
  
  /**
   * The Class AsyncClient.
   */
  public static class AsyncClient extends AuroraSchedulerManager.AsyncClient implements AsyncIface {
    
    /**
     * The Class Factory.
     */
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      
      /** The client manager. */
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      
      /** The protocol factory. */
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      
      /**
       * Instantiates a new factory.
       *
       * @param clientManager the client manager
       * @param protocolFactory the protocol factory
       */
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      
      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncClientFactory#getAsyncClient(org.apache.thrift.transport.TNonblockingTransport)
       */
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    /**
     * Instantiates a new async client.
     *
     * @param protocolFactory the protocol factory
     * @param clientManager the client manager
     * @param transport the transport
     */
    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#setQuota(java.lang.String, org.apache.airavata.cloud.aurora.client.sdk.ResourceAggregate, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void setQuota(String ownerRole, ResourceAggregate quota, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setQuota_call method_call = new setQuota_call(ownerRole, quota, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class setQuota_call.
     */
    public static class setQuota_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The owner role. */
      private String ownerRole;
      
      /** The quota. */
      private ResourceAggregate quota;
      
      /**
       * Instantiates a new sets the quota call.
       *
       * @param ownerRole the owner role
       * @param quota the quota
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public setQuota_call(String ownerRole, ResourceAggregate quota, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.ownerRole = ownerRole;
        this.quota = quota;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setQuota", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setQuota_args args = new setQuota_args();
        args.setOwnerRole(ownerRole);
        args.setQuota(quota);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setQuota();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#forceTaskState(java.lang.String, org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void forceTaskState(String taskId, ScheduleStatus status, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      forceTaskState_call method_call = new forceTaskState_call(taskId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class forceTaskState_call.
     */
    public static class forceTaskState_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The task id. */
      private String taskId;
      
      /** The status. */
      private ScheduleStatus status;
      
      /**
       * Instantiates a new force task state call.
       *
       * @param taskId the task id
       * @param status the status
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public forceTaskState_call(String taskId, ScheduleStatus status, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.taskId = taskId;
        this.status = status;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("forceTaskState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        forceTaskState_args args = new forceTaskState_args();
        args.setTaskId(taskId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_forceTaskState();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#performBackup(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void performBackup(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      performBackup_call method_call = new performBackup_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class performBackup_call.
     */
    public static class performBackup_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new perform backup call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public performBackup_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("performBackup", org.apache.thrift.protocol.TMessageType.CALL, 0));
        performBackup_args args = new performBackup_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_performBackup();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#listBackups(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void listBackups(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      listBackups_call method_call = new listBackups_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class listBackups_call.
     */
    public static class listBackups_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new list backups call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public listBackups_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("listBackups", org.apache.thrift.protocol.TMessageType.CALL, 0));
        listBackups_args args = new listBackups_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_listBackups();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#stageRecovery(java.lang.String, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void stageRecovery(String backupId, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stageRecovery_call method_call = new stageRecovery_call(backupId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class stageRecovery_call.
     */
    public static class stageRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The backup id. */
      private String backupId;
      
      /**
       * Instantiates a new stage recovery call.
       *
       * @param backupId the backup id
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public stageRecovery_call(String backupId, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.backupId = backupId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stageRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stageRecovery_args args = new stageRecovery_args();
        args.setBackupId(backupId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_stageRecovery();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#queryRecovery(org.apache.airavata.cloud.aurora.client.sdk.TaskQuery, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void queryRecovery(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryRecovery_call method_call = new queryRecovery_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class queryRecovery_call.
     */
    public static class queryRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The query. */
      private TaskQuery query;
      
      /**
       * Instantiates a new query recovery call.
       *
       * @param query the query
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public queryRecovery_call(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryRecovery_args args = new queryRecovery_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryRecovery();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#deleteRecoveryTasks(org.apache.airavata.cloud.aurora.client.sdk.TaskQuery, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void deleteRecoveryTasks(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteRecoveryTasks_call method_call = new deleteRecoveryTasks_call(query, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class deleteRecoveryTasks_call.
     */
    public static class deleteRecoveryTasks_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The query. */
      private TaskQuery query;
      
      /**
       * Instantiates a new delete recovery tasks call.
       *
       * @param query the query
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public deleteRecoveryTasks_call(TaskQuery query, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.query = query;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteRecoveryTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteRecoveryTasks_args args = new deleteRecoveryTasks_args();
        args.setQuery(query);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteRecoveryTasks();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#commitRecovery(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void commitRecovery(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      commitRecovery_call method_call = new commitRecovery_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class commitRecovery_call.
     */
    public static class commitRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new commit recovery call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public commitRecovery_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("commitRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        commitRecovery_args args = new commitRecovery_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_commitRecovery();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#unloadRecovery(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void unloadRecovery(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      unloadRecovery_call method_call = new unloadRecovery_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class unloadRecovery_call.
     */
    public static class unloadRecovery_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new unload recovery call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public unloadRecovery_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("unloadRecovery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        unloadRecovery_args args = new unloadRecovery_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_unloadRecovery();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#startMaintenance(org.apache.airavata.cloud.aurora.client.sdk.Hosts, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void startMaintenance(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startMaintenance_call method_call = new startMaintenance_call(hosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class startMaintenance_call.
     */
    public static class startMaintenance_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The hosts. */
      private Hosts hosts;
      
      /**
       * Instantiates a new start maintenance call.
       *
       * @param hosts the hosts
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public startMaintenance_call(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hosts = hosts;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startMaintenance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startMaintenance_args args = new startMaintenance_args();
        args.setHosts(hosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_startMaintenance();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#drainHosts(org.apache.airavata.cloud.aurora.client.sdk.Hosts, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void drainHosts(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      drainHosts_call method_call = new drainHosts_call(hosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class drainHosts_call.
     */
    public static class drainHosts_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The hosts. */
      private Hosts hosts;
      
      /**
       * Instantiates a new drain hosts call.
       *
       * @param hosts the hosts
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public drainHosts_call(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hosts = hosts;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("drainHosts", org.apache.thrift.protocol.TMessageType.CALL, 0));
        drainHosts_args args = new drainHosts_args();
        args.setHosts(hosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_drainHosts();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#maintenanceStatus(org.apache.airavata.cloud.aurora.client.sdk.Hosts, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void maintenanceStatus(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      maintenanceStatus_call method_call = new maintenanceStatus_call(hosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class maintenanceStatus_call.
     */
    public static class maintenanceStatus_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The hosts. */
      private Hosts hosts;
      
      /**
       * Instantiates a new maintenance status call.
       *
       * @param hosts the hosts
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public maintenanceStatus_call(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hosts = hosts;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("maintenanceStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        maintenanceStatus_args args = new maintenanceStatus_args();
        args.setHosts(hosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_maintenanceStatus();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#endMaintenance(org.apache.airavata.cloud.aurora.client.sdk.Hosts, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void endMaintenance(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      endMaintenance_call method_call = new endMaintenance_call(hosts, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class endMaintenance_call.
     */
    public static class endMaintenance_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The hosts. */
      private Hosts hosts;
      
      /**
       * Instantiates a new end maintenance call.
       *
       * @param hosts the hosts
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public endMaintenance_call(Hosts hosts, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.hosts = hosts;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("endMaintenance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        endMaintenance_args args = new endMaintenance_args();
        args.setHosts(hosts);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_endMaintenance();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#snapshot(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void snapshot(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      snapshot_call method_call = new snapshot_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class snapshot_call.
     */
    public static class snapshot_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new snapshot call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public snapshot_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("snapshot", org.apache.thrift.protocol.TMessageType.CALL, 0));
        snapshot_args args = new snapshot_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_snapshot();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#rewriteConfigs(org.apache.airavata.cloud.aurora.client.sdk.RewriteConfigsRequest, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void rewriteConfigs(RewriteConfigsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rewriteConfigs_call method_call = new rewriteConfigs_call(request, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class rewriteConfigs_call.
     */
    public static class rewriteConfigs_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The request. */
      private RewriteConfigsRequest request;
      
      /**
       * Instantiates a new rewrite configs call.
       *
       * @param request the request
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public rewriteConfigs_call(RewriteConfigsRequest request, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.request = request;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rewriteConfigs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rewriteConfigs_args args = new rewriteConfigs_args();
        args.setRequest(request);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rewriteConfigs();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#triggerExplicitTaskReconciliation(org.apache.airavata.cloud.aurora.client.sdk.ExplicitReconciliationSettings, org.apache.thrift.async.AsyncMethodCallback)
     */
    public void triggerExplicitTaskReconciliation(ExplicitReconciliationSettings settings, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerExplicitTaskReconciliation_call method_call = new triggerExplicitTaskReconciliation_call(settings, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class triggerExplicitTaskReconciliation_call.
     */
    public static class triggerExplicitTaskReconciliation_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /** The settings. */
      private ExplicitReconciliationSettings settings;
      
      /**
       * Instantiates a new trigger explicit task reconciliation call.
       *
       * @param settings the settings
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public triggerExplicitTaskReconciliation_call(ExplicitReconciliationSettings settings, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.settings = settings;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerExplicitTaskReconciliation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerExplicitTaskReconciliation_args args = new triggerExplicitTaskReconciliation_args();
        args.setSettings(settings);
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_triggerExplicitTaskReconciliation();
      }
    }

    /* (non-Javadoc)
     * @see org.apache.airavata.cloud.aurora.client.sdk.AuroraAdmin.AsyncIface#triggerImplicitTaskReconciliation(org.apache.thrift.async.AsyncMethodCallback)
     */
    public void triggerImplicitTaskReconciliation(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      triggerImplicitTaskReconciliation_call method_call = new triggerImplicitTaskReconciliation_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    /**
     * The Class triggerImplicitTaskReconciliation_call.
     */
    public static class triggerImplicitTaskReconciliation_call extends org.apache.thrift.async.TAsyncMethodCall {
      
      /**
       * Instantiates a new trigger implicit task reconciliation call.
       *
       * @param resultHandler the result handler
       * @param client the client
       * @param protocolFactory the protocol factory
       * @param transport the transport
       * @throws TException the t exception
       */
      public triggerImplicitTaskReconciliation_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.async.TAsyncMethodCall#write_args(org.apache.thrift.protocol.TProtocol)
       */
      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("triggerImplicitTaskReconciliation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        triggerImplicitTaskReconciliation_args args = new triggerImplicitTaskReconciliation_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      /**
       * Gets the result.
       *
       * @return the result
       * @throws TException the t exception
       */
      public Response getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_triggerImplicitTaskReconciliation();
      }
    }

  }

  /**
   * The Class Processor.
   *
   * @param <I> the generic type
   */
  public static class Processor<I extends Iface> extends AuroraSchedulerManager.Processor<I> implements org.apache.thrift.TProcessor {
    
    /** The Constant LOGGER. */
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    
    /**
     * Instantiates a new processor.
     *
     * @param iface the iface
     */
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    /**
     * Instantiates a new processor.
     *
     * @param iface the iface
     * @param processMap the process map
     */
    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    /**
     * Gets the process map.
     *
     * @param <I> the generic type
     * @param processMap the process map
     * @return the process map
     */
    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setQuota", new setQuota());
      processMap.put("forceTaskState", new forceTaskState());
      processMap.put("performBackup", new performBackup());
      processMap.put("listBackups", new listBackups());
      processMap.put("stageRecovery", new stageRecovery());
      processMap.put("queryRecovery", new queryRecovery());
      processMap.put("deleteRecoveryTasks", new deleteRecoveryTasks());
      processMap.put("commitRecovery", new commitRecovery());
      processMap.put("unloadRecovery", new unloadRecovery());
      processMap.put("startMaintenance", new startMaintenance());
      processMap.put("drainHosts", new drainHosts());
      processMap.put("maintenanceStatus", new maintenanceStatus());
      processMap.put("endMaintenance", new endMaintenance());
      processMap.put("snapshot", new snapshot());
      processMap.put("rewriteConfigs", new rewriteConfigs());
      processMap.put("triggerExplicitTaskReconciliation", new triggerExplicitTaskReconciliation());
      processMap.put("triggerImplicitTaskReconciliation", new triggerImplicitTaskReconciliation());
      return processMap;
    }

    /**
     * The Class setQuota.
     *
     * @param <I> the generic type
     */
    public static class setQuota<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setQuota_args> {
      
      /**
       * Instantiates a new sets the quota.
       */
      public setQuota() {
        super("setQuota");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public setQuota_args getEmptyArgsInstance() {
        return new setQuota_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public setQuota_result getResult(I iface, setQuota_args args) throws org.apache.thrift.TException {
        setQuota_result result = new setQuota_result();
        result.success = iface.setQuota(args.ownerRole, args.quota);
        return result;
      }
    }

    /**
     * The Class forceTaskState.
     *
     * @param <I> the generic type
     */
    public static class forceTaskState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, forceTaskState_args> {
      
      /**
       * Instantiates a new force task state.
       */
      public forceTaskState() {
        super("forceTaskState");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public forceTaskState_args getEmptyArgsInstance() {
        return new forceTaskState_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public forceTaskState_result getResult(I iface, forceTaskState_args args) throws org.apache.thrift.TException {
        forceTaskState_result result = new forceTaskState_result();
        result.success = iface.forceTaskState(args.taskId, args.status);
        return result;
      }
    }

    /**
     * The Class performBackup.
     *
     * @param <I> the generic type
     */
    public static class performBackup<I extends Iface> extends org.apache.thrift.ProcessFunction<I, performBackup_args> {
      
      /**
       * Instantiates a new perform backup.
       */
      public performBackup() {
        super("performBackup");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public performBackup_args getEmptyArgsInstance() {
        return new performBackup_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public performBackup_result getResult(I iface, performBackup_args args) throws org.apache.thrift.TException {
        performBackup_result result = new performBackup_result();
        result.success = iface.performBackup();
        return result;
      }
    }

    /**
     * The Class listBackups.
     *
     * @param <I> the generic type
     */
    public static class listBackups<I extends Iface> extends org.apache.thrift.ProcessFunction<I, listBackups_args> {
      
      /**
       * Instantiates a new list backups.
       */
      public listBackups() {
        super("listBackups");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public listBackups_args getEmptyArgsInstance() {
        return new listBackups_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public listBackups_result getResult(I iface, listBackups_args args) throws org.apache.thrift.TException {
        listBackups_result result = new listBackups_result();
        result.success = iface.listBackups();
        return result;
      }
    }

    /**
     * The Class stageRecovery.
     *
     * @param <I> the generic type
     */
    public static class stageRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stageRecovery_args> {
      
      /**
       * Instantiates a new stage recovery.
       */
      public stageRecovery() {
        super("stageRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public stageRecovery_args getEmptyArgsInstance() {
        return new stageRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public stageRecovery_result getResult(I iface, stageRecovery_args args) throws org.apache.thrift.TException {
        stageRecovery_result result = new stageRecovery_result();
        result.success = iface.stageRecovery(args.backupId);
        return result;
      }
    }

    /**
     * The Class queryRecovery.
     *
     * @param <I> the generic type
     */
    public static class queryRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryRecovery_args> {
      
      /**
       * Instantiates a new query recovery.
       */
      public queryRecovery() {
        super("queryRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public queryRecovery_args getEmptyArgsInstance() {
        return new queryRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public queryRecovery_result getResult(I iface, queryRecovery_args args) throws org.apache.thrift.TException {
        queryRecovery_result result = new queryRecovery_result();
        result.success = iface.queryRecovery(args.query);
        return result;
      }
    }

    /**
     * The Class deleteRecoveryTasks.
     *
     * @param <I> the generic type
     */
    public static class deleteRecoveryTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteRecoveryTasks_args> {
      
      /**
       * Instantiates a new delete recovery tasks.
       */
      public deleteRecoveryTasks() {
        super("deleteRecoveryTasks");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public deleteRecoveryTasks_args getEmptyArgsInstance() {
        return new deleteRecoveryTasks_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public deleteRecoveryTasks_result getResult(I iface, deleteRecoveryTasks_args args) throws org.apache.thrift.TException {
        deleteRecoveryTasks_result result = new deleteRecoveryTasks_result();
        result.success = iface.deleteRecoveryTasks(args.query);
        return result;
      }
    }

    /**
     * The Class commitRecovery.
     *
     * @param <I> the generic type
     */
    public static class commitRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, commitRecovery_args> {
      
      /**
       * Instantiates a new commit recovery.
       */
      public commitRecovery() {
        super("commitRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public commitRecovery_args getEmptyArgsInstance() {
        return new commitRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public commitRecovery_result getResult(I iface, commitRecovery_args args) throws org.apache.thrift.TException {
        commitRecovery_result result = new commitRecovery_result();
        result.success = iface.commitRecovery();
        return result;
      }
    }

    /**
     * The Class unloadRecovery.
     *
     * @param <I> the generic type
     */
    public static class unloadRecovery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, unloadRecovery_args> {
      
      /**
       * Instantiates a new unload recovery.
       */
      public unloadRecovery() {
        super("unloadRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public unloadRecovery_args getEmptyArgsInstance() {
        return new unloadRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public unloadRecovery_result getResult(I iface, unloadRecovery_args args) throws org.apache.thrift.TException {
        unloadRecovery_result result = new unloadRecovery_result();
        result.success = iface.unloadRecovery();
        return result;
      }
    }

    /**
     * The Class startMaintenance.
     *
     * @param <I> the generic type
     */
    public static class startMaintenance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startMaintenance_args> {
      
      /**
       * Instantiates a new start maintenance.
       */
      public startMaintenance() {
        super("startMaintenance");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public startMaintenance_args getEmptyArgsInstance() {
        return new startMaintenance_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public startMaintenance_result getResult(I iface, startMaintenance_args args) throws org.apache.thrift.TException {
        startMaintenance_result result = new startMaintenance_result();
        result.success = iface.startMaintenance(args.hosts);
        return result;
      }
    }

    /**
     * The Class drainHosts.
     *
     * @param <I> the generic type
     */
    public static class drainHosts<I extends Iface> extends org.apache.thrift.ProcessFunction<I, drainHosts_args> {
      
      /**
       * Instantiates a new drain hosts.
       */
      public drainHosts() {
        super("drainHosts");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public drainHosts_args getEmptyArgsInstance() {
        return new drainHosts_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public drainHosts_result getResult(I iface, drainHosts_args args) throws org.apache.thrift.TException {
        drainHosts_result result = new drainHosts_result();
        result.success = iface.drainHosts(args.hosts);
        return result;
      }
    }

    /**
     * The Class maintenanceStatus.
     *
     * @param <I> the generic type
     */
    public static class maintenanceStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, maintenanceStatus_args> {
      
      /**
       * Instantiates a new maintenance status.
       */
      public maintenanceStatus() {
        super("maintenanceStatus");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public maintenanceStatus_args getEmptyArgsInstance() {
        return new maintenanceStatus_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public maintenanceStatus_result getResult(I iface, maintenanceStatus_args args) throws org.apache.thrift.TException {
        maintenanceStatus_result result = new maintenanceStatus_result();
        result.success = iface.maintenanceStatus(args.hosts);
        return result;
      }
    }

    /**
     * The Class endMaintenance.
     *
     * @param <I> the generic type
     */
    public static class endMaintenance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, endMaintenance_args> {
      
      /**
       * Instantiates a new end maintenance.
       */
      public endMaintenance() {
        super("endMaintenance");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public endMaintenance_args getEmptyArgsInstance() {
        return new endMaintenance_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public endMaintenance_result getResult(I iface, endMaintenance_args args) throws org.apache.thrift.TException {
        endMaintenance_result result = new endMaintenance_result();
        result.success = iface.endMaintenance(args.hosts);
        return result;
      }
    }

    /**
     * The Class snapshot.
     *
     * @param <I> the generic type
     */
    public static class snapshot<I extends Iface> extends org.apache.thrift.ProcessFunction<I, snapshot_args> {
      
      /**
       * Instantiates a new snapshot.
       */
      public snapshot() {
        super("snapshot");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public snapshot_args getEmptyArgsInstance() {
        return new snapshot_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public snapshot_result getResult(I iface, snapshot_args args) throws org.apache.thrift.TException {
        snapshot_result result = new snapshot_result();
        result.success = iface.snapshot();
        return result;
      }
    }

    /**
     * The Class rewriteConfigs.
     *
     * @param <I> the generic type
     */
    public static class rewriteConfigs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rewriteConfigs_args> {
      
      /**
       * Instantiates a new rewrite configs.
       */
      public rewriteConfigs() {
        super("rewriteConfigs");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public rewriteConfigs_args getEmptyArgsInstance() {
        return new rewriteConfigs_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public rewriteConfigs_result getResult(I iface, rewriteConfigs_args args) throws org.apache.thrift.TException {
        rewriteConfigs_result result = new rewriteConfigs_result();
        result.success = iface.rewriteConfigs(args.request);
        return result;
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation.
     *
     * @param <I> the generic type
     */
    public static class triggerExplicitTaskReconciliation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerExplicitTaskReconciliation_args> {
      
      /**
       * Instantiates a new trigger explicit task reconciliation.
       */
      public triggerExplicitTaskReconciliation() {
        super("triggerExplicitTaskReconciliation");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public triggerExplicitTaskReconciliation_args getEmptyArgsInstance() {
        return new triggerExplicitTaskReconciliation_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public triggerExplicitTaskReconciliation_result getResult(I iface, triggerExplicitTaskReconciliation_args args) throws org.apache.thrift.TException {
        triggerExplicitTaskReconciliation_result result = new triggerExplicitTaskReconciliation_result();
        result.success = iface.triggerExplicitTaskReconciliation(args.settings);
        return result;
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation.
     *
     * @param <I> the generic type
     */
    public static class triggerImplicitTaskReconciliation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, triggerImplicitTaskReconciliation_args> {
      
      /**
       * Instantiates a new trigger implicit task reconciliation.
       */
      public triggerImplicitTaskReconciliation() {
        super("triggerImplicitTaskReconciliation");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getEmptyArgsInstance()
       */
      public triggerImplicitTaskReconciliation_args getEmptyArgsInstance() {
        return new triggerImplicitTaskReconciliation_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.ProcessFunction#getResult(java.lang.Object, org.apache.thrift.TBase)
       */
      public triggerImplicitTaskReconciliation_result getResult(I iface, triggerImplicitTaskReconciliation_args args) throws org.apache.thrift.TException {
        triggerImplicitTaskReconciliation_result result = new triggerImplicitTaskReconciliation_result();
        result.success = iface.triggerImplicitTaskReconciliation();
        return result;
      }
    }

  }

  /**
   * The Class AsyncProcessor.
   *
   * @param <I> the generic type
   */
  public static class AsyncProcessor<I extends AsyncIface> extends AuroraSchedulerManager.AsyncProcessor<I> {
    
    /** The Constant LOGGER. */
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    
    /**
     * Instantiates a new async processor.
     *
     * @param iface the iface
     */
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    /**
     * Instantiates a new async processor.
     *
     * @param iface the iface
     * @param processMap the process map
     */
    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    /**
     * Gets the process map.
     *
     * @param <I> the generic type
     * @param processMap the process map
     * @return the process map
     */
    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setQuota", new setQuota());
      processMap.put("forceTaskState", new forceTaskState());
      processMap.put("performBackup", new performBackup());
      processMap.put("listBackups", new listBackups());
      processMap.put("stageRecovery", new stageRecovery());
      processMap.put("queryRecovery", new queryRecovery());
      processMap.put("deleteRecoveryTasks", new deleteRecoveryTasks());
      processMap.put("commitRecovery", new commitRecovery());
      processMap.put("unloadRecovery", new unloadRecovery());
      processMap.put("startMaintenance", new startMaintenance());
      processMap.put("drainHosts", new drainHosts());
      processMap.put("maintenanceStatus", new maintenanceStatus());
      processMap.put("endMaintenance", new endMaintenance());
      processMap.put("snapshot", new snapshot());
      processMap.put("rewriteConfigs", new rewriteConfigs());
      processMap.put("triggerExplicitTaskReconciliation", new triggerExplicitTaskReconciliation());
      processMap.put("triggerImplicitTaskReconciliation", new triggerImplicitTaskReconciliation());
      return processMap;
    }

    /**
     * The Class setQuota.
     *
     * @param <I> the generic type
     */
    public static class setQuota<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setQuota_args, Response> {
      
      /**
       * Instantiates a new sets the quota.
       */
      public setQuota() {
        super("setQuota");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public setQuota_args getEmptyArgsInstance() {
        return new setQuota_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            setQuota_result result = new setQuota_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setQuota_result result = new setQuota_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, setQuota_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.setQuota(args.ownerRole, args.quota,resultHandler);
      }
    }

    /**
     * The Class forceTaskState.
     *
     * @param <I> the generic type
     */
    public static class forceTaskState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, forceTaskState_args, Response> {
      
      /**
       * Instantiates a new force task state.
       */
      public forceTaskState() {
        super("forceTaskState");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public forceTaskState_args getEmptyArgsInstance() {
        return new forceTaskState_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            forceTaskState_result result = new forceTaskState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            forceTaskState_result result = new forceTaskState_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, forceTaskState_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.forceTaskState(args.taskId, args.status,resultHandler);
      }
    }

    /**
     * The Class performBackup.
     *
     * @param <I> the generic type
     */
    public static class performBackup<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, performBackup_args, Response> {
      
      /**
       * Instantiates a new perform backup.
       */
      public performBackup() {
        super("performBackup");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public performBackup_args getEmptyArgsInstance() {
        return new performBackup_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            performBackup_result result = new performBackup_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            performBackup_result result = new performBackup_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, performBackup_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.performBackup(resultHandler);
      }
    }

    /**
     * The Class listBackups.
     *
     * @param <I> the generic type
     */
    public static class listBackups<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, listBackups_args, Response> {
      
      /**
       * Instantiates a new list backups.
       */
      public listBackups() {
        super("listBackups");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public listBackups_args getEmptyArgsInstance() {
        return new listBackups_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            listBackups_result result = new listBackups_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            listBackups_result result = new listBackups_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, listBackups_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.listBackups(resultHandler);
      }
    }

    /**
     * The Class stageRecovery.
     *
     * @param <I> the generic type
     */
    public static class stageRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stageRecovery_args, Response> {
      
      /**
       * Instantiates a new stage recovery.
       */
      public stageRecovery() {
        super("stageRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public stageRecovery_args getEmptyArgsInstance() {
        return new stageRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            stageRecovery_result result = new stageRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stageRecovery_result result = new stageRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, stageRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.stageRecovery(args.backupId,resultHandler);
      }
    }

    /**
     * The Class queryRecovery.
     *
     * @param <I> the generic type
     */
    public static class queryRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryRecovery_args, Response> {
      
      /**
       * Instantiates a new query recovery.
       */
      public queryRecovery() {
        super("queryRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public queryRecovery_args getEmptyArgsInstance() {
        return new queryRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            queryRecovery_result result = new queryRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            queryRecovery_result result = new queryRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, queryRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.queryRecovery(args.query,resultHandler);
      }
    }

    /**
     * The Class deleteRecoveryTasks.
     *
     * @param <I> the generic type
     */
    public static class deleteRecoveryTasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteRecoveryTasks_args, Response> {
      
      /**
       * Instantiates a new delete recovery tasks.
       */
      public deleteRecoveryTasks() {
        super("deleteRecoveryTasks");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public deleteRecoveryTasks_args getEmptyArgsInstance() {
        return new deleteRecoveryTasks_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            deleteRecoveryTasks_result result = new deleteRecoveryTasks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            deleteRecoveryTasks_result result = new deleteRecoveryTasks_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, deleteRecoveryTasks_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.deleteRecoveryTasks(args.query,resultHandler);
      }
    }

    /**
     * The Class commitRecovery.
     *
     * @param <I> the generic type
     */
    public static class commitRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, commitRecovery_args, Response> {
      
      /**
       * Instantiates a new commit recovery.
       */
      public commitRecovery() {
        super("commitRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public commitRecovery_args getEmptyArgsInstance() {
        return new commitRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            commitRecovery_result result = new commitRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            commitRecovery_result result = new commitRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, commitRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.commitRecovery(resultHandler);
      }
    }

    /**
     * The Class unloadRecovery.
     *
     * @param <I> the generic type
     */
    public static class unloadRecovery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, unloadRecovery_args, Response> {
      
      /**
       * Instantiates a new unload recovery.
       */
      public unloadRecovery() {
        super("unloadRecovery");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public unloadRecovery_args getEmptyArgsInstance() {
        return new unloadRecovery_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            unloadRecovery_result result = new unloadRecovery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            unloadRecovery_result result = new unloadRecovery_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, unloadRecovery_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.unloadRecovery(resultHandler);
      }
    }

    /**
     * The Class startMaintenance.
     *
     * @param <I> the generic type
     */
    public static class startMaintenance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startMaintenance_args, Response> {
      
      /**
       * Instantiates a new start maintenance.
       */
      public startMaintenance() {
        super("startMaintenance");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public startMaintenance_args getEmptyArgsInstance() {
        return new startMaintenance_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            startMaintenance_result result = new startMaintenance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startMaintenance_result result = new startMaintenance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, startMaintenance_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.startMaintenance(args.hosts,resultHandler);
      }
    }

    /**
     * The Class drainHosts.
     *
     * @param <I> the generic type
     */
    public static class drainHosts<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, drainHosts_args, Response> {
      
      /**
       * Instantiates a new drain hosts.
       */
      public drainHosts() {
        super("drainHosts");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public drainHosts_args getEmptyArgsInstance() {
        return new drainHosts_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            drainHosts_result result = new drainHosts_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            drainHosts_result result = new drainHosts_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, drainHosts_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.drainHosts(args.hosts,resultHandler);
      }
    }

    /**
     * The Class maintenanceStatus.
     *
     * @param <I> the generic type
     */
    public static class maintenanceStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, maintenanceStatus_args, Response> {
      
      /**
       * Instantiates a new maintenance status.
       */
      public maintenanceStatus() {
        super("maintenanceStatus");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public maintenanceStatus_args getEmptyArgsInstance() {
        return new maintenanceStatus_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            maintenanceStatus_result result = new maintenanceStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            maintenanceStatus_result result = new maintenanceStatus_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, maintenanceStatus_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.maintenanceStatus(args.hosts,resultHandler);
      }
    }

    /**
     * The Class endMaintenance.
     *
     * @param <I> the generic type
     */
    public static class endMaintenance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, endMaintenance_args, Response> {
      
      /**
       * Instantiates a new end maintenance.
       */
      public endMaintenance() {
        super("endMaintenance");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public endMaintenance_args getEmptyArgsInstance() {
        return new endMaintenance_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            endMaintenance_result result = new endMaintenance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            endMaintenance_result result = new endMaintenance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, endMaintenance_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.endMaintenance(args.hosts,resultHandler);
      }
    }

    /**
     * The Class snapshot.
     *
     * @param <I> the generic type
     */
    public static class snapshot<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, snapshot_args, Response> {
      
      /**
       * Instantiates a new snapshot.
       */
      public snapshot() {
        super("snapshot");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public snapshot_args getEmptyArgsInstance() {
        return new snapshot_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            snapshot_result result = new snapshot_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            snapshot_result result = new snapshot_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, snapshot_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.snapshot(resultHandler);
      }
    }

    /**
     * The Class rewriteConfigs.
     *
     * @param <I> the generic type
     */
    public static class rewriteConfigs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rewriteConfigs_args, Response> {
      
      /**
       * Instantiates a new rewrite configs.
       */
      public rewriteConfigs() {
        super("rewriteConfigs");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public rewriteConfigs_args getEmptyArgsInstance() {
        return new rewriteConfigs_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            rewriteConfigs_result result = new rewriteConfigs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            rewriteConfigs_result result = new rewriteConfigs_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, rewriteConfigs_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.rewriteConfigs(args.request,resultHandler);
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation.
     *
     * @param <I> the generic type
     */
    public static class triggerExplicitTaskReconciliation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, triggerExplicitTaskReconciliation_args, Response> {
      
      /**
       * Instantiates a new trigger explicit task reconciliation.
       */
      public triggerExplicitTaskReconciliation() {
        super("triggerExplicitTaskReconciliation");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public triggerExplicitTaskReconciliation_args getEmptyArgsInstance() {
        return new triggerExplicitTaskReconciliation_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            triggerExplicitTaskReconciliation_result result = new triggerExplicitTaskReconciliation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            triggerExplicitTaskReconciliation_result result = new triggerExplicitTaskReconciliation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, triggerExplicitTaskReconciliation_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.triggerExplicitTaskReconciliation(args.settings,resultHandler);
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation.
     *
     * @param <I> the generic type
     */
    public static class triggerImplicitTaskReconciliation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, triggerImplicitTaskReconciliation_args, Response> {
      
      /**
       * Instantiates a new trigger implicit task reconciliation.
       */
      public triggerImplicitTaskReconciliation() {
        super("triggerImplicitTaskReconciliation");
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getEmptyArgsInstance()
       */
      public triggerImplicitTaskReconciliation_args getEmptyArgsInstance() {
        return new triggerImplicitTaskReconciliation_args();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#getResultHandler(org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer, int)
       */
      public AsyncMethodCallback<Response> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Response>() { 
          public void onComplete(Response o) {
            triggerImplicitTaskReconciliation_result result = new triggerImplicitTaskReconciliation_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            triggerImplicitTaskReconciliation_result result = new triggerImplicitTaskReconciliation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#isOneway()
       */
      protected boolean isOneway() {
        return false;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.AsyncProcessFunction#start(java.lang.Object, java.lang.Object, org.apache.thrift.async.AsyncMethodCallback)
       */
      public void start(I iface, triggerImplicitTaskReconciliation_args args, org.apache.thrift.async.AsyncMethodCallback<Response> resultHandler) throws TException {
        iface.triggerImplicitTaskReconciliation(resultHandler);
      }
    }

  }

  /**
   * The Class setQuota_args.
   */
  public static class setQuota_args implements org.apache.thrift.TBase<setQuota_args, setQuota_args._Fields>, java.io.Serializable, Cloneable, Comparable<setQuota_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setQuota_args");

    /** The Constant OWNER_ROLE_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField OWNER_ROLE_FIELD_DESC = new org.apache.thrift.protocol.TField("ownerRole", org.apache.thrift.protocol.TType.STRING, (short)1);
    
    /** The Constant QUOTA_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField QUOTA_FIELD_DESC = new org.apache.thrift.protocol.TField("quota", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setQuota_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setQuota_argsTupleSchemeFactory());
    }

    /** The owner role. */
    public String ownerRole; // required
    
    /** The quota. */
    public ResourceAggregate quota; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The owner role. */
      OWNER_ROLE((short)1, "ownerRole"),
      
      /** The quota. */
      QUOTA((short)2, "quota");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // OWNER_ROLE
            return OWNER_ROLE;
          case 2: // QUOTA
            return QUOTA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.OWNER_ROLE, new org.apache.thrift.meta_data.FieldMetaData("ownerRole", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.QUOTA, new org.apache.thrift.meta_data.FieldMetaData("quota", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceAggregate.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setQuota_args.class, metaDataMap);
    }

    /**
     * Instantiates a new sets the quota args.
     */
    public setQuota_args() {
    }

    /**
     * Instantiates a new sets the quota args.
     *
     * @param ownerRole the owner role
     * @param quota the quota
     */
    public setQuota_args(
      String ownerRole,
      ResourceAggregate quota)
    {
      this();
      this.ownerRole = ownerRole;
      this.quota = quota;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public setQuota_args(setQuota_args other) {
      if (other.isSetOwnerRole()) {
        this.ownerRole = other.ownerRole;
      }
      if (other.isSetQuota()) {
        this.quota = new ResourceAggregate(other.quota);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public setQuota_args deepCopy() {
      return new setQuota_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.ownerRole = null;
      this.quota = null;
    }

    /**
     * Gets the owner role.
     *
     * @return the owner role
     */
    public String getOwnerRole() {
      return this.ownerRole;
    }

    /**
     * Sets the owner role.
     *
     * @param ownerRole the owner role
     * @return the sets the quota args
     */
    public setQuota_args setOwnerRole(String ownerRole) {
      this.ownerRole = ownerRole;
      return this;
    }

    /**
     * Unset owner role.
     */
    public void unsetOwnerRole() {
      this.ownerRole = null;
    }

    /**
     *  Returns true if field ownerRole is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the owner role
     */
    public boolean isSetOwnerRole() {
      return this.ownerRole != null;
    }

    /**
     * Sets the owner role is set.
     *
     * @param value the new owner role is set
     */
    public void setOwnerRoleIsSet(boolean value) {
      if (!value) {
        this.ownerRole = null;
      }
    }

    /**
     * Gets the quota.
     *
     * @return the quota
     */
    public ResourceAggregate getQuota() {
      return this.quota;
    }

    /**
     * Sets the quota.
     *
     * @param quota the quota
     * @return the sets the quota args
     */
    public setQuota_args setQuota(ResourceAggregate quota) {
      this.quota = quota;
      return this;
    }

    /**
     * Unset quota.
     */
    public void unsetQuota() {
      this.quota = null;
    }

    /**
     *  Returns true if field quota is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the quota
     */
    public boolean isSetQuota() {
      return this.quota != null;
    }

    /**
     * Sets the quota is set.
     *
     * @param value the new quota is set
     */
    public void setQuotaIsSet(boolean value) {
      if (!value) {
        this.quota = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case OWNER_ROLE:
        if (value == null) {
          unsetOwnerRole();
        } else {
          setOwnerRole((String)value);
        }
        break;

      case QUOTA:
        if (value == null) {
          unsetQuota();
        } else {
          setQuota((ResourceAggregate)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case OWNER_ROLE:
        return getOwnerRole();

      case QUOTA:
        return getQuota();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case OWNER_ROLE:
        return isSetOwnerRole();
      case QUOTA:
        return isSetQuota();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setQuota_args)
        return this.equals((setQuota_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(setQuota_args that) {
      if (that == null)
        return false;

      boolean this_present_ownerRole = true && this.isSetOwnerRole();
      boolean that_present_ownerRole = true && that.isSetOwnerRole();
      if (this_present_ownerRole || that_present_ownerRole) {
        if (!(this_present_ownerRole && that_present_ownerRole))
          return false;
        if (!this.ownerRole.equals(that.ownerRole))
          return false;
      }

      boolean this_present_quota = true && this.isSetQuota();
      boolean that_present_quota = true && that.isSetQuota();
      if (this_present_quota || that_present_quota) {
        if (!(this_present_quota && that_present_quota))
          return false;
        if (!this.quota.equals(that.quota))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_ownerRole = true && (isSetOwnerRole());
      list.add(present_ownerRole);
      if (present_ownerRole)
        list.add(ownerRole);

      boolean present_quota = true && (isSetQuota());
      list.add(present_quota);
      if (present_quota)
        list.add(quota);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(setQuota_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetOwnerRole()).compareTo(other.isSetOwnerRole());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOwnerRole()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ownerRole, other.ownerRole);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetQuota()).compareTo(other.isSetQuota());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuota()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.quota, other.quota);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setQuota_args(");
      boolean first = true;

      sb.append("ownerRole:");
      if (this.ownerRole == null) {
        sb.append("null");
      } else {
        sb.append(this.ownerRole);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("quota:");
      if (this.quota == null) {
        sb.append("null");
      } else {
        sb.append(this.quota);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (quota != null) {
        quota.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating setQuota_argsStandardScheme objects.
     */
    private static class setQuota_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public setQuota_argsStandardScheme getScheme() {
        return new setQuota_argsStandardScheme();
      }
    }

    /**
     * The Class setQuota_argsStandardScheme.
     */
    private static class setQuota_argsStandardScheme extends StandardScheme<setQuota_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, setQuota_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // OWNER_ROLE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ownerRole = iprot.readString();
                struct.setOwnerRoleIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // QUOTA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.quota = new ResourceAggregate();
                struct.quota.read(iprot);
                struct.setQuotaIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, setQuota_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.ownerRole != null) {
          oprot.writeFieldBegin(OWNER_ROLE_FIELD_DESC);
          oprot.writeString(struct.ownerRole);
          oprot.writeFieldEnd();
        }
        if (struct.quota != null) {
          oprot.writeFieldBegin(QUOTA_FIELD_DESC);
          struct.quota.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating setQuota_argsTupleScheme objects.
     */
    private static class setQuota_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public setQuota_argsTupleScheme getScheme() {
        return new setQuota_argsTupleScheme();
      }
    }

    /**
     * The Class setQuota_argsTupleScheme.
     */
    private static class setQuota_argsTupleScheme extends TupleScheme<setQuota_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetOwnerRole()) {
          optionals.set(0);
        }
        if (struct.isSetQuota()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetOwnerRole()) {
          oprot.writeString(struct.ownerRole);
        }
        if (struct.isSetQuota()) {
          struct.quota.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setQuota_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.ownerRole = iprot.readString();
          struct.setOwnerRoleIsSet(true);
        }
        if (incoming.get(1)) {
          struct.quota = new ResourceAggregate();
          struct.quota.read(iprot);
          struct.setQuotaIsSet(true);
        }
      }
    }

  }

  /**
   * The Class setQuota_result.
   */
  public static class setQuota_result implements org.apache.thrift.TBase<setQuota_result, setQuota_result._Fields>, java.io.Serializable, Cloneable, Comparable<setQuota_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setQuota_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setQuota_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setQuota_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setQuota_result.class, metaDataMap);
    }

    /**
     * Instantiates a new sets the quota result.
     */
    public setQuota_result() {
    }

    /**
     * Instantiates a new sets the quota result.
     *
     * @param success the success
     */
    public setQuota_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public setQuota_result(setQuota_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public setQuota_result deepCopy() {
      return new setQuota_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the sets the quota result
     */
    public setQuota_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setQuota_result)
        return this.equals((setQuota_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(setQuota_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(setQuota_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setQuota_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating setQuota_resultStandardScheme objects.
     */
    private static class setQuota_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public setQuota_resultStandardScheme getScheme() {
        return new setQuota_resultStandardScheme();
      }
    }

    /**
     * The Class setQuota_resultStandardScheme.
     */
    private static class setQuota_resultStandardScheme extends StandardScheme<setQuota_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, setQuota_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, setQuota_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating setQuota_resultTupleScheme objects.
     */
    private static class setQuota_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public setQuota_resultTupleScheme getScheme() {
        return new setQuota_resultTupleScheme();
      }
    }

    /**
     * The Class setQuota_resultTupleScheme.
     */
    private static class setQuota_resultTupleScheme extends TupleScheme<setQuota_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setQuota_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class forceTaskState_args.
   */
  public static class forceTaskState_args implements org.apache.thrift.TBase<forceTaskState_args, forceTaskState_args._Fields>, java.io.Serializable, Cloneable, Comparable<forceTaskState_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceTaskState_args");

    /** The Constant TASK_ID_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField TASK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("taskId", org.apache.thrift.protocol.TType.STRING, (short)1);
    
    /** The Constant STATUS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceTaskState_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceTaskState_argsTupleSchemeFactory());
    }

    /** The task id. */
    public String taskId; // required
    
    /**
     * The status.
     *
     * @see ScheduleStatus
     */
    public ScheduleStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The task id. */
      TASK_ID((short)1, "taskId"),
      
      /**
       * The status.
       *
       * @see ScheduleStatus
       */
      STATUS((short)2, "status");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TASK_ID
            return TASK_ID;
          case 2: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TASK_ID, new org.apache.thrift.meta_data.FieldMetaData("taskId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ScheduleStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceTaskState_args.class, metaDataMap);
    }

    /**
     * Instantiates a new force task state args.
     */
    public forceTaskState_args() {
    }

    /**
     * Instantiates a new force task state args.
     *
     * @param taskId the task id
     * @param status the status
     */
    public forceTaskState_args(
      String taskId,
      ScheduleStatus status)
    {
      this();
      this.taskId = taskId;
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public forceTaskState_args(forceTaskState_args other) {
      if (other.isSetTaskId()) {
        this.taskId = other.taskId;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public forceTaskState_args deepCopy() {
      return new forceTaskState_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.taskId = null;
      this.status = null;
    }

    /**
     * Gets the task id.
     *
     * @return the task id
     */
    public String getTaskId() {
      return this.taskId;
    }

    /**
     * Sets the task id.
     *
     * @param taskId the task id
     * @return the force task state args
     */
    public forceTaskState_args setTaskId(String taskId) {
      this.taskId = taskId;
      return this;
    }

    /**
     * Unset task id.
     */
    public void unsetTaskId() {
      this.taskId = null;
    }

    /**
     *  Returns true if field taskId is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the task id
     */
    public boolean isSetTaskId() {
      return this.taskId != null;
    }

    /**
     * Sets the task id is set.
     *
     * @param value the new task id is set
     */
    public void setTaskIdIsSet(boolean value) {
      if (!value) {
        this.taskId = null;
      }
    }

    /**
     * Gets the status.
     *
     * @return the status
     * @see ScheduleStatus
     */
    public ScheduleStatus getStatus() {
      return this.status;
    }

    /**
     * Sets the status.
     *
     * @param status the status
     * @return the force task state args
     * @see ScheduleStatus
     */
    public forceTaskState_args setStatus(ScheduleStatus status) {
      this.status = status;
      return this;
    }

    /**
     * Unset status.
     */
    public void unsetStatus() {
      this.status = null;
    }

    /**
     *  Returns true if field status is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the status
     */
    public boolean isSetStatus() {
      return this.status != null;
    }

    /**
     * Sets the status is set.
     *
     * @param value the new status is set
     */
    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TASK_ID:
        if (value == null) {
          unsetTaskId();
        } else {
          setTaskId((String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((ScheduleStatus)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TASK_ID:
        return getTaskId();

      case STATUS:
        return getStatus();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TASK_ID:
        return isSetTaskId();
      case STATUS:
        return isSetStatus();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceTaskState_args)
        return this.equals((forceTaskState_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(forceTaskState_args that) {
      if (that == null)
        return false;

      boolean this_present_taskId = true && this.isSetTaskId();
      boolean that_present_taskId = true && that.isSetTaskId();
      if (this_present_taskId || that_present_taskId) {
        if (!(this_present_taskId && that_present_taskId))
          return false;
        if (!this.taskId.equals(that.taskId))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_taskId = true && (isSetTaskId());
      list.add(present_taskId);
      if (present_taskId)
        list.add(taskId);

      boolean present_status = true && (isSetStatus());
      list.add(present_status);
      if (present_status)
        list.add(status.getValue());

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(forceTaskState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTaskId()).compareTo(other.isSetTaskId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskId, other.taskId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceTaskState_args(");
      boolean first = true;

      sb.append("taskId:");
      if (this.taskId == null) {
        sb.append("null");
      } else {
        sb.append(this.taskId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating forceTaskState_argsStandardScheme objects.
     */
    private static class forceTaskState_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public forceTaskState_argsStandardScheme getScheme() {
        return new forceTaskState_argsStandardScheme();
      }
    }

    /**
     * The Class forceTaskState_argsStandardScheme.
     */
    private static class forceTaskState_argsStandardScheme extends StandardScheme<forceTaskState_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, forceTaskState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TASK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.taskId = iprot.readString();
                struct.setTaskIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, forceTaskState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.taskId != null) {
          oprot.writeFieldBegin(TASK_ID_FIELD_DESC);
          oprot.writeString(struct.taskId);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating forceTaskState_argsTupleScheme objects.
     */
    private static class forceTaskState_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public forceTaskState_argsTupleScheme getScheme() {
        return new forceTaskState_argsTupleScheme();
      }
    }

    /**
     * The Class forceTaskState_argsTupleScheme.
     */
    private static class forceTaskState_argsTupleScheme extends TupleScheme<forceTaskState_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceTaskState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTaskId()) {
          optionals.set(0);
        }
        if (struct.isSetStatus()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetTaskId()) {
          oprot.writeString(struct.taskId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceTaskState_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.taskId = iprot.readString();
          struct.setTaskIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.status = org.apache.airavata.cloud.aurora.client.sdk.ScheduleStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

  }

  /**
   * The Class forceTaskState_result.
   */
  public static class forceTaskState_result implements org.apache.thrift.TBase<forceTaskState_result, forceTaskState_result._Fields>, java.io.Serializable, Cloneable, Comparable<forceTaskState_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("forceTaskState_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new forceTaskState_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new forceTaskState_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(forceTaskState_result.class, metaDataMap);
    }

    /**
     * Instantiates a new force task state result.
     */
    public forceTaskState_result() {
    }

    /**
     * Instantiates a new force task state result.
     *
     * @param success the success
     */
    public forceTaskState_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public forceTaskState_result(forceTaskState_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public forceTaskState_result deepCopy() {
      return new forceTaskState_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the force task state result
     */
    public forceTaskState_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof forceTaskState_result)
        return this.equals((forceTaskState_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(forceTaskState_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(forceTaskState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("forceTaskState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating forceTaskState_resultStandardScheme objects.
     */
    private static class forceTaskState_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public forceTaskState_resultStandardScheme getScheme() {
        return new forceTaskState_resultStandardScheme();
      }
    }

    /**
     * The Class forceTaskState_resultStandardScheme.
     */
    private static class forceTaskState_resultStandardScheme extends StandardScheme<forceTaskState_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, forceTaskState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, forceTaskState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating forceTaskState_resultTupleScheme objects.
     */
    private static class forceTaskState_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public forceTaskState_resultTupleScheme getScheme() {
        return new forceTaskState_resultTupleScheme();
      }
    }

    /**
     * The Class forceTaskState_resultTupleScheme.
     */
    private static class forceTaskState_resultTupleScheme extends TupleScheme<forceTaskState_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, forceTaskState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, forceTaskState_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class performBackup_args.
   */
  public static class performBackup_args implements org.apache.thrift.TBase<performBackup_args, performBackup_args._Fields>, java.io.Serializable, Cloneable, Comparable<performBackup_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBackup_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBackup_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBackup_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBackup_args.class, metaDataMap);
    }

    /**
     * Instantiates a new perform backup args.
     */
    public performBackup_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public performBackup_args(performBackup_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public performBackup_args deepCopy() {
      return new performBackup_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBackup_args)
        return this.equals((performBackup_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(performBackup_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(performBackup_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBackup_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating performBackup_argsStandardScheme objects.
     */
    private static class performBackup_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public performBackup_argsStandardScheme getScheme() {
        return new performBackup_argsStandardScheme();
      }
    }

    /**
     * The Class performBackup_argsStandardScheme.
     */
    private static class performBackup_argsStandardScheme extends StandardScheme<performBackup_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, performBackup_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, performBackup_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating performBackup_argsTupleScheme objects.
     */
    private static class performBackup_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public performBackup_argsTupleScheme getScheme() {
        return new performBackup_argsTupleScheme();
      }
    }

    /**
     * The Class performBackup_argsTupleScheme.
     */
    private static class performBackup_argsTupleScheme extends TupleScheme<performBackup_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBackup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBackup_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class performBackup_result.
   */
  public static class performBackup_result implements org.apache.thrift.TBase<performBackup_result, performBackup_result._Fields>, java.io.Serializable, Cloneable, Comparable<performBackup_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("performBackup_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new performBackup_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new performBackup_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(performBackup_result.class, metaDataMap);
    }

    /**
     * Instantiates a new perform backup result.
     */
    public performBackup_result() {
    }

    /**
     * Instantiates a new perform backup result.
     *
     * @param success the success
     */
    public performBackup_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public performBackup_result(performBackup_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public performBackup_result deepCopy() {
      return new performBackup_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the perform backup result
     */
    public performBackup_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof performBackup_result)
        return this.equals((performBackup_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(performBackup_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(performBackup_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("performBackup_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating performBackup_resultStandardScheme objects.
     */
    private static class performBackup_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public performBackup_resultStandardScheme getScheme() {
        return new performBackup_resultStandardScheme();
      }
    }

    /**
     * The Class performBackup_resultStandardScheme.
     */
    private static class performBackup_resultStandardScheme extends StandardScheme<performBackup_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, performBackup_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, performBackup_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating performBackup_resultTupleScheme objects.
     */
    private static class performBackup_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public performBackup_resultTupleScheme getScheme() {
        return new performBackup_resultTupleScheme();
      }
    }

    /**
     * The Class performBackup_resultTupleScheme.
     */
    private static class performBackup_resultTupleScheme extends TupleScheme<performBackup_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, performBackup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, performBackup_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class listBackups_args.
   */
  public static class listBackups_args implements org.apache.thrift.TBase<listBackups_args, listBackups_args._Fields>, java.io.Serializable, Cloneable, Comparable<listBackups_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBackups_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBackups_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBackups_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBackups_args.class, metaDataMap);
    }

    /**
     * Instantiates a new list backups args.
     */
    public listBackups_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public listBackups_args(listBackups_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public listBackups_args deepCopy() {
      return new listBackups_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBackups_args)
        return this.equals((listBackups_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(listBackups_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(listBackups_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBackups_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating listBackups_argsStandardScheme objects.
     */
    private static class listBackups_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public listBackups_argsStandardScheme getScheme() {
        return new listBackups_argsStandardScheme();
      }
    }

    /**
     * The Class listBackups_argsStandardScheme.
     */
    private static class listBackups_argsStandardScheme extends StandardScheme<listBackups_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, listBackups_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, listBackups_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating listBackups_argsTupleScheme objects.
     */
    private static class listBackups_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public listBackups_argsTupleScheme getScheme() {
        return new listBackups_argsTupleScheme();
      }
    }

    /**
     * The Class listBackups_argsTupleScheme.
     */
    private static class listBackups_argsTupleScheme extends TupleScheme<listBackups_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBackups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBackups_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class listBackups_result.
   */
  public static class listBackups_result implements org.apache.thrift.TBase<listBackups_result, listBackups_result._Fields>, java.io.Serializable, Cloneable, Comparable<listBackups_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("listBackups_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new listBackups_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new listBackups_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(listBackups_result.class, metaDataMap);
    }

    /**
     * Instantiates a new list backups result.
     */
    public listBackups_result() {
    }

    /**
     * Instantiates a new list backups result.
     *
     * @param success the success
     */
    public listBackups_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public listBackups_result(listBackups_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public listBackups_result deepCopy() {
      return new listBackups_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the list backups result
     */
    public listBackups_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof listBackups_result)
        return this.equals((listBackups_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(listBackups_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(listBackups_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("listBackups_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating listBackups_resultStandardScheme objects.
     */
    private static class listBackups_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public listBackups_resultStandardScheme getScheme() {
        return new listBackups_resultStandardScheme();
      }
    }

    /**
     * The Class listBackups_resultStandardScheme.
     */
    private static class listBackups_resultStandardScheme extends StandardScheme<listBackups_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, listBackups_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, listBackups_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating listBackups_resultTupleScheme objects.
     */
    private static class listBackups_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public listBackups_resultTupleScheme getScheme() {
        return new listBackups_resultTupleScheme();
      }
    }

    /**
     * The Class listBackups_resultTupleScheme.
     */
    private static class listBackups_resultTupleScheme extends TupleScheme<listBackups_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, listBackups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, listBackups_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class stageRecovery_args.
   */
  public static class stageRecovery_args implements org.apache.thrift.TBase<stageRecovery_args, stageRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<stageRecovery_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stageRecovery_args");

    /** The Constant BACKUP_ID_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField BACKUP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("backupId", org.apache.thrift.protocol.TType.STRING, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stageRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stageRecovery_argsTupleSchemeFactory());
    }

    /** The backup id. */
    public String backupId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The backup id. */
      BACKUP_ID((short)1, "backupId");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // BACKUP_ID
            return BACKUP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.BACKUP_ID, new org.apache.thrift.meta_data.FieldMetaData("backupId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stageRecovery_args.class, metaDataMap);
    }

    /**
     * Instantiates a new stage recovery args.
     */
    public stageRecovery_args() {
    }

    /**
     * Instantiates a new stage recovery args.
     *
     * @param backupId the backup id
     */
    public stageRecovery_args(
      String backupId)
    {
      this();
      this.backupId = backupId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public stageRecovery_args(stageRecovery_args other) {
      if (other.isSetBackupId()) {
        this.backupId = other.backupId;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public stageRecovery_args deepCopy() {
      return new stageRecovery_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.backupId = null;
    }

    /**
     * Gets the backup id.
     *
     * @return the backup id
     */
    public String getBackupId() {
      return this.backupId;
    }

    /**
     * Sets the backup id.
     *
     * @param backupId the backup id
     * @return the stage recovery args
     */
    public stageRecovery_args setBackupId(String backupId) {
      this.backupId = backupId;
      return this;
    }

    /**
     * Unset backup id.
     */
    public void unsetBackupId() {
      this.backupId = null;
    }

    /**
     *  Returns true if field backupId is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the backup id
     */
    public boolean isSetBackupId() {
      return this.backupId != null;
    }

    /**
     * Sets the backup id is set.
     *
     * @param value the new backup id is set
     */
    public void setBackupIdIsSet(boolean value) {
      if (!value) {
        this.backupId = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case BACKUP_ID:
        if (value == null) {
          unsetBackupId();
        } else {
          setBackupId((String)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case BACKUP_ID:
        return getBackupId();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case BACKUP_ID:
        return isSetBackupId();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stageRecovery_args)
        return this.equals((stageRecovery_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(stageRecovery_args that) {
      if (that == null)
        return false;

      boolean this_present_backupId = true && this.isSetBackupId();
      boolean that_present_backupId = true && that.isSetBackupId();
      if (this_present_backupId || that_present_backupId) {
        if (!(this_present_backupId && that_present_backupId))
          return false;
        if (!this.backupId.equals(that.backupId))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_backupId = true && (isSetBackupId());
      list.add(present_backupId);
      if (present_backupId)
        list.add(backupId);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(stageRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetBackupId()).compareTo(other.isSetBackupId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBackupId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backupId, other.backupId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stageRecovery_args(");
      boolean first = true;

      sb.append("backupId:");
      if (this.backupId == null) {
        sb.append("null");
      } else {
        sb.append(this.backupId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating stageRecovery_argsStandardScheme objects.
     */
    private static class stageRecovery_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public stageRecovery_argsStandardScheme getScheme() {
        return new stageRecovery_argsStandardScheme();
      }
    }

    /**
     * The Class stageRecovery_argsStandardScheme.
     */
    private static class stageRecovery_argsStandardScheme extends StandardScheme<stageRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, stageRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // BACKUP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.backupId = iprot.readString();
                struct.setBackupIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, stageRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.backupId != null) {
          oprot.writeFieldBegin(BACKUP_ID_FIELD_DESC);
          oprot.writeString(struct.backupId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating stageRecovery_argsTupleScheme objects.
     */
    private static class stageRecovery_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public stageRecovery_argsTupleScheme getScheme() {
        return new stageRecovery_argsTupleScheme();
      }
    }

    /**
     * The Class stageRecovery_argsTupleScheme.
     */
    private static class stageRecovery_argsTupleScheme extends TupleScheme<stageRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stageRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetBackupId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetBackupId()) {
          oprot.writeString(struct.backupId);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stageRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.backupId = iprot.readString();
          struct.setBackupIdIsSet(true);
        }
      }
    }

  }

  /**
   * The Class stageRecovery_result.
   */
  public static class stageRecovery_result implements org.apache.thrift.TBase<stageRecovery_result, stageRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<stageRecovery_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stageRecovery_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stageRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stageRecovery_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stageRecovery_result.class, metaDataMap);
    }

    /**
     * Instantiates a new stage recovery result.
     */
    public stageRecovery_result() {
    }

    /**
     * Instantiates a new stage recovery result.
     *
     * @param success the success
     */
    public stageRecovery_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public stageRecovery_result(stageRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public stageRecovery_result deepCopy() {
      return new stageRecovery_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the stage recovery result
     */
    public stageRecovery_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stageRecovery_result)
        return this.equals((stageRecovery_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(stageRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(stageRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stageRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating stageRecovery_resultStandardScheme objects.
     */
    private static class stageRecovery_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public stageRecovery_resultStandardScheme getScheme() {
        return new stageRecovery_resultStandardScheme();
      }
    }

    /**
     * The Class stageRecovery_resultStandardScheme.
     */
    private static class stageRecovery_resultStandardScheme extends StandardScheme<stageRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, stageRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, stageRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating stageRecovery_resultTupleScheme objects.
     */
    private static class stageRecovery_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public stageRecovery_resultTupleScheme getScheme() {
        return new stageRecovery_resultTupleScheme();
      }
    }

    /**
     * The Class stageRecovery_resultTupleScheme.
     */
    private static class stageRecovery_resultTupleScheme extends TupleScheme<stageRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stageRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stageRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class queryRecovery_args.
   */
  public static class queryRecovery_args implements org.apache.thrift.TBase<queryRecovery_args, queryRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecovery_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecovery_args");

    /** The Constant QUERY_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecovery_argsTupleSchemeFactory());
    }

    /** The query. */
    public TaskQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The query. */
      QUERY((short)1, "query");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskQuery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecovery_args.class, metaDataMap);
    }

    /**
     * Instantiates a new query recovery args.
     */
    public queryRecovery_args() {
    }

    /**
     * Instantiates a new query recovery args.
     *
     * @param query the query
     */
    public queryRecovery_args(
      TaskQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public queryRecovery_args(queryRecovery_args other) {
      if (other.isSetQuery()) {
        this.query = new TaskQuery(other.query);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public queryRecovery_args deepCopy() {
      return new queryRecovery_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.query = null;
    }

    /**
     * Gets the query.
     *
     * @return the query
     */
    public TaskQuery getQuery() {
      return this.query;
    }

    /**
     * Sets the query.
     *
     * @param query the query
     * @return the query recovery args
     */
    public queryRecovery_args setQuery(TaskQuery query) {
      this.query = query;
      return this;
    }

    /**
     * Unset query.
     */
    public void unsetQuery() {
      this.query = null;
    }

    /**
     *  Returns true if field query is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the query
     */
    public boolean isSetQuery() {
      return this.query != null;
    }

    /**
     * Sets the query is set.
     *
     * @param value the new query is set
     */
    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((TaskQuery)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecovery_args)
        return this.equals((queryRecovery_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(queryRecovery_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(queryRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecovery_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating queryRecovery_argsStandardScheme objects.
     */
    private static class queryRecovery_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public queryRecovery_argsStandardScheme getScheme() {
        return new queryRecovery_argsStandardScheme();
      }
    }

    /**
     * The Class queryRecovery_argsStandardScheme.
     */
    private static class queryRecovery_argsStandardScheme extends StandardScheme<queryRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new TaskQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating queryRecovery_argsTupleScheme objects.
     */
    private static class queryRecovery_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public queryRecovery_argsTupleScheme getScheme() {
        return new queryRecovery_argsTupleScheme();
      }
    }

    /**
     * The Class queryRecovery_argsTupleScheme.
     */
    private static class queryRecovery_argsTupleScheme extends TupleScheme<queryRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new TaskQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  /**
   * The Class queryRecovery_result.
   */
  public static class queryRecovery_result implements org.apache.thrift.TBase<queryRecovery_result, queryRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryRecovery_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryRecovery_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new queryRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new queryRecovery_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryRecovery_result.class, metaDataMap);
    }

    /**
     * Instantiates a new query recovery result.
     */
    public queryRecovery_result() {
    }

    /**
     * Instantiates a new query recovery result.
     *
     * @param success the success
     */
    public queryRecovery_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public queryRecovery_result(queryRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public queryRecovery_result deepCopy() {
      return new queryRecovery_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the query recovery result
     */
    public queryRecovery_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof queryRecovery_result)
        return this.equals((queryRecovery_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(queryRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(queryRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("queryRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating queryRecovery_resultStandardScheme objects.
     */
    private static class queryRecovery_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public queryRecovery_resultStandardScheme getScheme() {
        return new queryRecovery_resultStandardScheme();
      }
    }

    /**
     * The Class queryRecovery_resultStandardScheme.
     */
    private static class queryRecovery_resultStandardScheme extends StandardScheme<queryRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, queryRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, queryRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating queryRecovery_resultTupleScheme objects.
     */
    private static class queryRecovery_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public queryRecovery_resultTupleScheme getScheme() {
        return new queryRecovery_resultTupleScheme();
      }
    }

    /**
     * The Class queryRecovery_resultTupleScheme.
     */
    private static class queryRecovery_resultTupleScheme extends TupleScheme<queryRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class deleteRecoveryTasks_args.
   */
  public static class deleteRecoveryTasks_args implements org.apache.thrift.TBase<deleteRecoveryTasks_args, deleteRecoveryTasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecoveryTasks_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecoveryTasks_args");

    /** The Constant QUERY_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField QUERY_FIELD_DESC = new org.apache.thrift.protocol.TField("query", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRecoveryTasks_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRecoveryTasks_argsTupleSchemeFactory());
    }

    /** The query. */
    public TaskQuery query; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The query. */
      QUERY((short)1, "query");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // QUERY
            return QUERY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.QUERY, new org.apache.thrift.meta_data.FieldMetaData("query", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskQuery.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecoveryTasks_args.class, metaDataMap);
    }

    /**
     * Instantiates a new delete recovery tasks args.
     */
    public deleteRecoveryTasks_args() {
    }

    /**
     * Instantiates a new delete recovery tasks args.
     *
     * @param query the query
     */
    public deleteRecoveryTasks_args(
      TaskQuery query)
    {
      this();
      this.query = query;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public deleteRecoveryTasks_args(deleteRecoveryTasks_args other) {
      if (other.isSetQuery()) {
        this.query = new TaskQuery(other.query);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public deleteRecoveryTasks_args deepCopy() {
      return new deleteRecoveryTasks_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.query = null;
    }

    /**
     * Gets the query.
     *
     * @return the query
     */
    public TaskQuery getQuery() {
      return this.query;
    }

    /**
     * Sets the query.
     *
     * @param query the query
     * @return the delete recovery tasks args
     */
    public deleteRecoveryTasks_args setQuery(TaskQuery query) {
      this.query = query;
      return this;
    }

    /**
     * Unset query.
     */
    public void unsetQuery() {
      this.query = null;
    }

    /**
     *  Returns true if field query is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the query
     */
    public boolean isSetQuery() {
      return this.query != null;
    }

    /**
     * Sets the query is set.
     *
     * @param value the new query is set
     */
    public void setQueryIsSet(boolean value) {
      if (!value) {
        this.query = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case QUERY:
        if (value == null) {
          unsetQuery();
        } else {
          setQuery((TaskQuery)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case QUERY:
        return getQuery();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case QUERY:
        return isSetQuery();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecoveryTasks_args)
        return this.equals((deleteRecoveryTasks_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(deleteRecoveryTasks_args that) {
      if (that == null)
        return false;

      boolean this_present_query = true && this.isSetQuery();
      boolean that_present_query = true && that.isSetQuery();
      if (this_present_query || that_present_query) {
        if (!(this_present_query && that_present_query))
          return false;
        if (!this.query.equals(that.query))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_query = true && (isSetQuery());
      list.add(present_query);
      if (present_query)
        list.add(query);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(deleteRecoveryTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetQuery()).compareTo(other.isSetQuery());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQuery()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.query, other.query);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRecoveryTasks_args(");
      boolean first = true;

      sb.append("query:");
      if (this.query == null) {
        sb.append("null");
      } else {
        sb.append(this.query);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (query != null) {
        query.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating deleteRecoveryTasks_argsStandardScheme objects.
     */
    private static class deleteRecoveryTasks_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public deleteRecoveryTasks_argsStandardScheme getScheme() {
        return new deleteRecoveryTasks_argsStandardScheme();
      }
    }

    /**
     * The Class deleteRecoveryTasks_argsStandardScheme.
     */
    private static class deleteRecoveryTasks_argsStandardScheme extends StandardScheme<deleteRecoveryTasks_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecoveryTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // QUERY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.query = new TaskQuery();
                struct.query.read(iprot);
                struct.setQueryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecoveryTasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.query != null) {
          oprot.writeFieldBegin(QUERY_FIELD_DESC);
          struct.query.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating deleteRecoveryTasks_argsTupleScheme objects.
     */
    private static class deleteRecoveryTasks_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public deleteRecoveryTasks_argsTupleScheme getScheme() {
        return new deleteRecoveryTasks_argsTupleScheme();
      }
    }

    /**
     * The Class deleteRecoveryTasks_argsTupleScheme.
     */
    private static class deleteRecoveryTasks_argsTupleScheme extends TupleScheme<deleteRecoveryTasks_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecoveryTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetQuery()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQuery()) {
          struct.query.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecoveryTasks_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.query = new TaskQuery();
          struct.query.read(iprot);
          struct.setQueryIsSet(true);
        }
      }
    }

  }

  /**
   * The Class deleteRecoveryTasks_result.
   */
  public static class deleteRecoveryTasks_result implements org.apache.thrift.TBase<deleteRecoveryTasks_result, deleteRecoveryTasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteRecoveryTasks_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteRecoveryTasks_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new deleteRecoveryTasks_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new deleteRecoveryTasks_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteRecoveryTasks_result.class, metaDataMap);
    }

    /**
     * Instantiates a new delete recovery tasks result.
     */
    public deleteRecoveryTasks_result() {
    }

    /**
     * Instantiates a new delete recovery tasks result.
     *
     * @param success the success
     */
    public deleteRecoveryTasks_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public deleteRecoveryTasks_result(deleteRecoveryTasks_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public deleteRecoveryTasks_result deepCopy() {
      return new deleteRecoveryTasks_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the delete recovery tasks result
     */
    public deleteRecoveryTasks_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteRecoveryTasks_result)
        return this.equals((deleteRecoveryTasks_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(deleteRecoveryTasks_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(deleteRecoveryTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("deleteRecoveryTasks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating deleteRecoveryTasks_resultStandardScheme objects.
     */
    private static class deleteRecoveryTasks_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public deleteRecoveryTasks_resultStandardScheme getScheme() {
        return new deleteRecoveryTasks_resultStandardScheme();
      }
    }

    /**
     * The Class deleteRecoveryTasks_resultStandardScheme.
     */
    private static class deleteRecoveryTasks_resultStandardScheme extends StandardScheme<deleteRecoveryTasks_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteRecoveryTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteRecoveryTasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating deleteRecoveryTasks_resultTupleScheme objects.
     */
    private static class deleteRecoveryTasks_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public deleteRecoveryTasks_resultTupleScheme getScheme() {
        return new deleteRecoveryTasks_resultTupleScheme();
      }
    }

    /**
     * The Class deleteRecoveryTasks_resultTupleScheme.
     */
    private static class deleteRecoveryTasks_resultTupleScheme extends TupleScheme<deleteRecoveryTasks_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteRecoveryTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteRecoveryTasks_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class commitRecovery_args.
   */
  public static class commitRecovery_args implements org.apache.thrift.TBase<commitRecovery_args, commitRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<commitRecovery_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitRecovery_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitRecovery_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitRecovery_args.class, metaDataMap);
    }

    /**
     * Instantiates a new commit recovery args.
     */
    public commitRecovery_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public commitRecovery_args(commitRecovery_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public commitRecovery_args deepCopy() {
      return new commitRecovery_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitRecovery_args)
        return this.equals((commitRecovery_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(commitRecovery_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(commitRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitRecovery_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating commitRecovery_argsStandardScheme objects.
     */
    private static class commitRecovery_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public commitRecovery_argsStandardScheme getScheme() {
        return new commitRecovery_argsStandardScheme();
      }
    }

    /**
     * The Class commitRecovery_argsStandardScheme.
     */
    private static class commitRecovery_argsStandardScheme extends StandardScheme<commitRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, commitRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, commitRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating commitRecovery_argsTupleScheme objects.
     */
    private static class commitRecovery_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public commitRecovery_argsTupleScheme getScheme() {
        return new commitRecovery_argsTupleScheme();
      }
    }

    /**
     * The Class commitRecovery_argsTupleScheme.
     */
    private static class commitRecovery_argsTupleScheme extends TupleScheme<commitRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class commitRecovery_result.
   */
  public static class commitRecovery_result implements org.apache.thrift.TBase<commitRecovery_result, commitRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<commitRecovery_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("commitRecovery_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new commitRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new commitRecovery_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(commitRecovery_result.class, metaDataMap);
    }

    /**
     * Instantiates a new commit recovery result.
     */
    public commitRecovery_result() {
    }

    /**
     * Instantiates a new commit recovery result.
     *
     * @param success the success
     */
    public commitRecovery_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public commitRecovery_result(commitRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public commitRecovery_result deepCopy() {
      return new commitRecovery_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the commit recovery result
     */
    public commitRecovery_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof commitRecovery_result)
        return this.equals((commitRecovery_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(commitRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(commitRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("commitRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating commitRecovery_resultStandardScheme objects.
     */
    private static class commitRecovery_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public commitRecovery_resultStandardScheme getScheme() {
        return new commitRecovery_resultStandardScheme();
      }
    }

    /**
     * The Class commitRecovery_resultStandardScheme.
     */
    private static class commitRecovery_resultStandardScheme extends StandardScheme<commitRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, commitRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, commitRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating commitRecovery_resultTupleScheme objects.
     */
    private static class commitRecovery_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public commitRecovery_resultTupleScheme getScheme() {
        return new commitRecovery_resultTupleScheme();
      }
    }

    /**
     * The Class commitRecovery_resultTupleScheme.
     */
    private static class commitRecovery_resultTupleScheme extends TupleScheme<commitRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, commitRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, commitRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class unloadRecovery_args.
   */
  public static class unloadRecovery_args implements org.apache.thrift.TBase<unloadRecovery_args, unloadRecovery_args._Fields>, java.io.Serializable, Cloneable, Comparable<unloadRecovery_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unloadRecovery_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unloadRecovery_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unloadRecovery_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unloadRecovery_args.class, metaDataMap);
    }

    /**
     * Instantiates a new unload recovery args.
     */
    public unloadRecovery_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public unloadRecovery_args(unloadRecovery_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public unloadRecovery_args deepCopy() {
      return new unloadRecovery_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unloadRecovery_args)
        return this.equals((unloadRecovery_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(unloadRecovery_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(unloadRecovery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unloadRecovery_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating unloadRecovery_argsStandardScheme objects.
     */
    private static class unloadRecovery_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public unloadRecovery_argsStandardScheme getScheme() {
        return new unloadRecovery_argsStandardScheme();
      }
    }

    /**
     * The Class unloadRecovery_argsStandardScheme.
     */
    private static class unloadRecovery_argsStandardScheme extends StandardScheme<unloadRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, unloadRecovery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, unloadRecovery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating unloadRecovery_argsTupleScheme objects.
     */
    private static class unloadRecovery_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public unloadRecovery_argsTupleScheme getScheme() {
        return new unloadRecovery_argsTupleScheme();
      }
    }

    /**
     * The Class unloadRecovery_argsTupleScheme.
     */
    private static class unloadRecovery_argsTupleScheme extends TupleScheme<unloadRecovery_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unloadRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unloadRecovery_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class unloadRecovery_result.
   */
  public static class unloadRecovery_result implements org.apache.thrift.TBase<unloadRecovery_result, unloadRecovery_result._Fields>, java.io.Serializable, Cloneable, Comparable<unloadRecovery_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("unloadRecovery_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new unloadRecovery_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new unloadRecovery_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(unloadRecovery_result.class, metaDataMap);
    }

    /**
     * Instantiates a new unload recovery result.
     */
    public unloadRecovery_result() {
    }

    /**
     * Instantiates a new unload recovery result.
     *
     * @param success the success
     */
    public unloadRecovery_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public unloadRecovery_result(unloadRecovery_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public unloadRecovery_result deepCopy() {
      return new unloadRecovery_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the unload recovery result
     */
    public unloadRecovery_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof unloadRecovery_result)
        return this.equals((unloadRecovery_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(unloadRecovery_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(unloadRecovery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("unloadRecovery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating unloadRecovery_resultStandardScheme objects.
     */
    private static class unloadRecovery_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public unloadRecovery_resultStandardScheme getScheme() {
        return new unloadRecovery_resultStandardScheme();
      }
    }

    /**
     * The Class unloadRecovery_resultStandardScheme.
     */
    private static class unloadRecovery_resultStandardScheme extends StandardScheme<unloadRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, unloadRecovery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, unloadRecovery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating unloadRecovery_resultTupleScheme objects.
     */
    private static class unloadRecovery_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public unloadRecovery_resultTupleScheme getScheme() {
        return new unloadRecovery_resultTupleScheme();
      }
    }

    /**
     * The Class unloadRecovery_resultTupleScheme.
     */
    private static class unloadRecovery_resultTupleScheme extends TupleScheme<unloadRecovery_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, unloadRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, unloadRecovery_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class startMaintenance_args.
   */
  public static class startMaintenance_args implements org.apache.thrift.TBase<startMaintenance_args, startMaintenance_args._Fields>, java.io.Serializable, Cloneable, Comparable<startMaintenance_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMaintenance_args");

    /** The Constant HOSTS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startMaintenance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startMaintenance_argsTupleSchemeFactory());
    }

    /** The hosts. */
    public Hosts hosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The hosts. */
      HOSTS((short)1, "hosts");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTS
            return HOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hosts.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMaintenance_args.class, metaDataMap);
    }

    /**
     * Instantiates a new start maintenance args.
     */
    public startMaintenance_args() {
    }

    /**
     * Instantiates a new start maintenance args.
     *
     * @param hosts the hosts
     */
    public startMaintenance_args(
      Hosts hosts)
    {
      this();
      this.hosts = hosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public startMaintenance_args(startMaintenance_args other) {
      if (other.isSetHosts()) {
        this.hosts = new Hosts(other.hosts);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public startMaintenance_args deepCopy() {
      return new startMaintenance_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.hosts = null;
    }

    /**
     * Gets the hosts.
     *
     * @return the hosts
     */
    public Hosts getHosts() {
      return this.hosts;
    }

    /**
     * Sets the hosts.
     *
     * @param hosts the hosts
     * @return the start maintenance args
     */
    public startMaintenance_args setHosts(Hosts hosts) {
      this.hosts = hosts;
      return this;
    }

    /**
     * Unset hosts.
     */
    public void unsetHosts() {
      this.hosts = null;
    }

    /**
     *  Returns true if field hosts is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the hosts
     */
    public boolean isSetHosts() {
      return this.hosts != null;
    }

    /**
     * Sets the hosts is set.
     *
     * @param value the new hosts is set
     */
    public void setHostsIsSet(boolean value) {
      if (!value) {
        this.hosts = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          setHosts((Hosts)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTS:
        return getHosts();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTS:
        return isSetHosts();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMaintenance_args)
        return this.equals((startMaintenance_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(startMaintenance_args that) {
      if (that == null)
        return false;

      boolean this_present_hosts = true && this.isSetHosts();
      boolean that_present_hosts = true && that.isSetHosts();
      if (this_present_hosts || that_present_hosts) {
        if (!(this_present_hosts && that_present_hosts))
          return false;
        if (!this.hosts.equals(that.hosts))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hosts = true && (isSetHosts());
      list.add(present_hosts);
      if (present_hosts)
        list.add(hosts);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(startMaintenance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHosts()).compareTo(other.isSetHosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startMaintenance_args(");
      boolean first = true;

      sb.append("hosts:");
      if (this.hosts == null) {
        sb.append("null");
      } else {
        sb.append(this.hosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hosts != null) {
        hosts.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating startMaintenance_argsStandardScheme objects.
     */
    private static class startMaintenance_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public startMaintenance_argsStandardScheme getScheme() {
        return new startMaintenance_argsStandardScheme();
      }
    }

    /**
     * The Class startMaintenance_argsStandardScheme.
     */
    private static class startMaintenance_argsStandardScheme extends StandardScheme<startMaintenance_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, startMaintenance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hosts = new Hosts();
                struct.hosts.read(iprot);
                struct.setHostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, startMaintenance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hosts != null) {
          oprot.writeFieldBegin(HOSTS_FIELD_DESC);
          struct.hosts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating startMaintenance_argsTupleScheme objects.
     */
    private static class startMaintenance_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public startMaintenance_argsTupleScheme getScheme() {
        return new startMaintenance_argsTupleScheme();
      }
    }

    /**
     * The Class startMaintenance_argsTupleScheme.
     */
    private static class startMaintenance_argsTupleScheme extends TupleScheme<startMaintenance_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMaintenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHosts()) {
          struct.hosts.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMaintenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hosts = new Hosts();
          struct.hosts.read(iprot);
          struct.setHostsIsSet(true);
        }
      }
    }

  }

  /**
   * The Class startMaintenance_result.
   */
  public static class startMaintenance_result implements org.apache.thrift.TBase<startMaintenance_result, startMaintenance_result._Fields>, java.io.Serializable, Cloneable, Comparable<startMaintenance_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startMaintenance_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startMaintenance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startMaintenance_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startMaintenance_result.class, metaDataMap);
    }

    /**
     * Instantiates a new start maintenance result.
     */
    public startMaintenance_result() {
    }

    /**
     * Instantiates a new start maintenance result.
     *
     * @param success the success
     */
    public startMaintenance_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public startMaintenance_result(startMaintenance_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public startMaintenance_result deepCopy() {
      return new startMaintenance_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the start maintenance result
     */
    public startMaintenance_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startMaintenance_result)
        return this.equals((startMaintenance_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(startMaintenance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(startMaintenance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startMaintenance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating startMaintenance_resultStandardScheme objects.
     */
    private static class startMaintenance_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public startMaintenance_resultStandardScheme getScheme() {
        return new startMaintenance_resultStandardScheme();
      }
    }

    /**
     * The Class startMaintenance_resultStandardScheme.
     */
    private static class startMaintenance_resultStandardScheme extends StandardScheme<startMaintenance_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, startMaintenance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, startMaintenance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating startMaintenance_resultTupleScheme objects.
     */
    private static class startMaintenance_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public startMaintenance_resultTupleScheme getScheme() {
        return new startMaintenance_resultTupleScheme();
      }
    }

    /**
     * The Class startMaintenance_resultTupleScheme.
     */
    private static class startMaintenance_resultTupleScheme extends TupleScheme<startMaintenance_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startMaintenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startMaintenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class drainHosts_args.
   */
  public static class drainHosts_args implements org.apache.thrift.TBase<drainHosts_args, drainHosts_args._Fields>, java.io.Serializable, Cloneable, Comparable<drainHosts_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drainHosts_args");

    /** The Constant HOSTS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drainHosts_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drainHosts_argsTupleSchemeFactory());
    }

    /** The hosts. */
    public Hosts hosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The hosts. */
      HOSTS((short)1, "hosts");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTS
            return HOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hosts.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drainHosts_args.class, metaDataMap);
    }

    /**
     * Instantiates a new drain hosts args.
     */
    public drainHosts_args() {
    }

    /**
     * Instantiates a new drain hosts args.
     *
     * @param hosts the hosts
     */
    public drainHosts_args(
      Hosts hosts)
    {
      this();
      this.hosts = hosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public drainHosts_args(drainHosts_args other) {
      if (other.isSetHosts()) {
        this.hosts = new Hosts(other.hosts);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public drainHosts_args deepCopy() {
      return new drainHosts_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.hosts = null;
    }

    /**
     * Gets the hosts.
     *
     * @return the hosts
     */
    public Hosts getHosts() {
      return this.hosts;
    }

    /**
     * Sets the hosts.
     *
     * @param hosts the hosts
     * @return the drain hosts args
     */
    public drainHosts_args setHosts(Hosts hosts) {
      this.hosts = hosts;
      return this;
    }

    /**
     * Unset hosts.
     */
    public void unsetHosts() {
      this.hosts = null;
    }

    /**
     *  Returns true if field hosts is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the hosts
     */
    public boolean isSetHosts() {
      return this.hosts != null;
    }

    /**
     * Sets the hosts is set.
     *
     * @param value the new hosts is set
     */
    public void setHostsIsSet(boolean value) {
      if (!value) {
        this.hosts = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          setHosts((Hosts)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTS:
        return getHosts();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTS:
        return isSetHosts();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drainHosts_args)
        return this.equals((drainHosts_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(drainHosts_args that) {
      if (that == null)
        return false;

      boolean this_present_hosts = true && this.isSetHosts();
      boolean that_present_hosts = true && that.isSetHosts();
      if (this_present_hosts || that_present_hosts) {
        if (!(this_present_hosts && that_present_hosts))
          return false;
        if (!this.hosts.equals(that.hosts))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hosts = true && (isSetHosts());
      list.add(present_hosts);
      if (present_hosts)
        list.add(hosts);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(drainHosts_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHosts()).compareTo(other.isSetHosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drainHosts_args(");
      boolean first = true;

      sb.append("hosts:");
      if (this.hosts == null) {
        sb.append("null");
      } else {
        sb.append(this.hosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hosts != null) {
        hosts.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating drainHosts_argsStandardScheme objects.
     */
    private static class drainHosts_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public drainHosts_argsStandardScheme getScheme() {
        return new drainHosts_argsStandardScheme();
      }
    }

    /**
     * The Class drainHosts_argsStandardScheme.
     */
    private static class drainHosts_argsStandardScheme extends StandardScheme<drainHosts_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, drainHosts_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hosts = new Hosts();
                struct.hosts.read(iprot);
                struct.setHostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, drainHosts_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hosts != null) {
          oprot.writeFieldBegin(HOSTS_FIELD_DESC);
          struct.hosts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating drainHosts_argsTupleScheme objects.
     */
    private static class drainHosts_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public drainHosts_argsTupleScheme getScheme() {
        return new drainHosts_argsTupleScheme();
      }
    }

    /**
     * The Class drainHosts_argsTupleScheme.
     */
    private static class drainHosts_argsTupleScheme extends TupleScheme<drainHosts_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drainHosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHosts()) {
          struct.hosts.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drainHosts_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hosts = new Hosts();
          struct.hosts.read(iprot);
          struct.setHostsIsSet(true);
        }
      }
    }

  }

  /**
   * The Class drainHosts_result.
   */
  public static class drainHosts_result implements org.apache.thrift.TBase<drainHosts_result, drainHosts_result._Fields>, java.io.Serializable, Cloneable, Comparable<drainHosts_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("drainHosts_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new drainHosts_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new drainHosts_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(drainHosts_result.class, metaDataMap);
    }

    /**
     * Instantiates a new drain hosts result.
     */
    public drainHosts_result() {
    }

    /**
     * Instantiates a new drain hosts result.
     *
     * @param success the success
     */
    public drainHosts_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public drainHosts_result(drainHosts_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public drainHosts_result deepCopy() {
      return new drainHosts_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the drain hosts result
     */
    public drainHosts_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof drainHosts_result)
        return this.equals((drainHosts_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(drainHosts_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(drainHosts_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("drainHosts_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating drainHosts_resultStandardScheme objects.
     */
    private static class drainHosts_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public drainHosts_resultStandardScheme getScheme() {
        return new drainHosts_resultStandardScheme();
      }
    }

    /**
     * The Class drainHosts_resultStandardScheme.
     */
    private static class drainHosts_resultStandardScheme extends StandardScheme<drainHosts_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, drainHosts_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, drainHosts_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating drainHosts_resultTupleScheme objects.
     */
    private static class drainHosts_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public drainHosts_resultTupleScheme getScheme() {
        return new drainHosts_resultTupleScheme();
      }
    }

    /**
     * The Class drainHosts_resultTupleScheme.
     */
    private static class drainHosts_resultTupleScheme extends TupleScheme<drainHosts_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, drainHosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, drainHosts_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class maintenanceStatus_args.
   */
  public static class maintenanceStatus_args implements org.apache.thrift.TBase<maintenanceStatus_args, maintenanceStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<maintenanceStatus_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("maintenanceStatus_args");

    /** The Constant HOSTS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new maintenanceStatus_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new maintenanceStatus_argsTupleSchemeFactory());
    }

    /** The hosts. */
    public Hosts hosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The hosts. */
      HOSTS((short)1, "hosts");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTS
            return HOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hosts.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(maintenanceStatus_args.class, metaDataMap);
    }

    /**
     * Instantiates a new maintenance status args.
     */
    public maintenanceStatus_args() {
    }

    /**
     * Instantiates a new maintenance status args.
     *
     * @param hosts the hosts
     */
    public maintenanceStatus_args(
      Hosts hosts)
    {
      this();
      this.hosts = hosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public maintenanceStatus_args(maintenanceStatus_args other) {
      if (other.isSetHosts()) {
        this.hosts = new Hosts(other.hosts);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public maintenanceStatus_args deepCopy() {
      return new maintenanceStatus_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.hosts = null;
    }

    /**
     * Gets the hosts.
     *
     * @return the hosts
     */
    public Hosts getHosts() {
      return this.hosts;
    }

    /**
     * Sets the hosts.
     *
     * @param hosts the hosts
     * @return the maintenance status args
     */
    public maintenanceStatus_args setHosts(Hosts hosts) {
      this.hosts = hosts;
      return this;
    }

    /**
     * Unset hosts.
     */
    public void unsetHosts() {
      this.hosts = null;
    }

    /**
     *  Returns true if field hosts is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the hosts
     */
    public boolean isSetHosts() {
      return this.hosts != null;
    }

    /**
     * Sets the hosts is set.
     *
     * @param value the new hosts is set
     */
    public void setHostsIsSet(boolean value) {
      if (!value) {
        this.hosts = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          setHosts((Hosts)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTS:
        return getHosts();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTS:
        return isSetHosts();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof maintenanceStatus_args)
        return this.equals((maintenanceStatus_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(maintenanceStatus_args that) {
      if (that == null)
        return false;

      boolean this_present_hosts = true && this.isSetHosts();
      boolean that_present_hosts = true && that.isSetHosts();
      if (this_present_hosts || that_present_hosts) {
        if (!(this_present_hosts && that_present_hosts))
          return false;
        if (!this.hosts.equals(that.hosts))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hosts = true && (isSetHosts());
      list.add(present_hosts);
      if (present_hosts)
        list.add(hosts);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(maintenanceStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHosts()).compareTo(other.isSetHosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("maintenanceStatus_args(");
      boolean first = true;

      sb.append("hosts:");
      if (this.hosts == null) {
        sb.append("null");
      } else {
        sb.append(this.hosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hosts != null) {
        hosts.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating maintenanceStatus_argsStandardScheme objects.
     */
    private static class maintenanceStatus_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public maintenanceStatus_argsStandardScheme getScheme() {
        return new maintenanceStatus_argsStandardScheme();
      }
    }

    /**
     * The Class maintenanceStatus_argsStandardScheme.
     */
    private static class maintenanceStatus_argsStandardScheme extends StandardScheme<maintenanceStatus_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, maintenanceStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hosts = new Hosts();
                struct.hosts.read(iprot);
                struct.setHostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, maintenanceStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hosts != null) {
          oprot.writeFieldBegin(HOSTS_FIELD_DESC);
          struct.hosts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating maintenanceStatus_argsTupleScheme objects.
     */
    private static class maintenanceStatus_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public maintenanceStatus_argsTupleScheme getScheme() {
        return new maintenanceStatus_argsTupleScheme();
      }
    }

    /**
     * The Class maintenanceStatus_argsTupleScheme.
     */
    private static class maintenanceStatus_argsTupleScheme extends TupleScheme<maintenanceStatus_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHosts()) {
          struct.hosts.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hosts = new Hosts();
          struct.hosts.read(iprot);
          struct.setHostsIsSet(true);
        }
      }
    }

  }

  /**
   * The Class maintenanceStatus_result.
   */
  public static class maintenanceStatus_result implements org.apache.thrift.TBase<maintenanceStatus_result, maintenanceStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<maintenanceStatus_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("maintenanceStatus_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new maintenanceStatus_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new maintenanceStatus_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(maintenanceStatus_result.class, metaDataMap);
    }

    /**
     * Instantiates a new maintenance status result.
     */
    public maintenanceStatus_result() {
    }

    /**
     * Instantiates a new maintenance status result.
     *
     * @param success the success
     */
    public maintenanceStatus_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public maintenanceStatus_result(maintenanceStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public maintenanceStatus_result deepCopy() {
      return new maintenanceStatus_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the maintenance status result
     */
    public maintenanceStatus_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof maintenanceStatus_result)
        return this.equals((maintenanceStatus_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(maintenanceStatus_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(maintenanceStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("maintenanceStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating maintenanceStatus_resultStandardScheme objects.
     */
    private static class maintenanceStatus_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public maintenanceStatus_resultStandardScheme getScheme() {
        return new maintenanceStatus_resultStandardScheme();
      }
    }

    /**
     * The Class maintenanceStatus_resultStandardScheme.
     */
    private static class maintenanceStatus_resultStandardScheme extends StandardScheme<maintenanceStatus_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, maintenanceStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, maintenanceStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating maintenanceStatus_resultTupleScheme objects.
     */
    private static class maintenanceStatus_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public maintenanceStatus_resultTupleScheme getScheme() {
        return new maintenanceStatus_resultTupleScheme();
      }
    }

    /**
     * The Class maintenanceStatus_resultTupleScheme.
     */
    private static class maintenanceStatus_resultTupleScheme extends TupleScheme<maintenanceStatus_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, maintenanceStatus_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class endMaintenance_args.
   */
  public static class endMaintenance_args implements org.apache.thrift.TBase<endMaintenance_args, endMaintenance_args._Fields>, java.io.Serializable, Cloneable, Comparable<endMaintenance_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endMaintenance_args");

    /** The Constant HOSTS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField HOSTS_FIELD_DESC = new org.apache.thrift.protocol.TField("hosts", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endMaintenance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endMaintenance_argsTupleSchemeFactory());
    }

    /** The hosts. */
    public Hosts hosts; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The hosts. */
      HOSTS((short)1, "hosts");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // HOSTS
            return HOSTS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.HOSTS, new org.apache.thrift.meta_data.FieldMetaData("hosts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Hosts.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endMaintenance_args.class, metaDataMap);
    }

    /**
     * Instantiates a new end maintenance args.
     */
    public endMaintenance_args() {
    }

    /**
     * Instantiates a new end maintenance args.
     *
     * @param hosts the hosts
     */
    public endMaintenance_args(
      Hosts hosts)
    {
      this();
      this.hosts = hosts;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public endMaintenance_args(endMaintenance_args other) {
      if (other.isSetHosts()) {
        this.hosts = new Hosts(other.hosts);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public endMaintenance_args deepCopy() {
      return new endMaintenance_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.hosts = null;
    }

    /**
     * Gets the hosts.
     *
     * @return the hosts
     */
    public Hosts getHosts() {
      return this.hosts;
    }

    /**
     * Sets the hosts.
     *
     * @param hosts the hosts
     * @return the end maintenance args
     */
    public endMaintenance_args setHosts(Hosts hosts) {
      this.hosts = hosts;
      return this;
    }

    /**
     * Unset hosts.
     */
    public void unsetHosts() {
      this.hosts = null;
    }

    /**
     *  Returns true if field hosts is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the hosts
     */
    public boolean isSetHosts() {
      return this.hosts != null;
    }

    /**
     * Sets the hosts is set.
     *
     * @param value the new hosts is set
     */
    public void setHostsIsSet(boolean value) {
      if (!value) {
        this.hosts = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case HOSTS:
        if (value == null) {
          unsetHosts();
        } else {
          setHosts((Hosts)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case HOSTS:
        return getHosts();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case HOSTS:
        return isSetHosts();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endMaintenance_args)
        return this.equals((endMaintenance_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(endMaintenance_args that) {
      if (that == null)
        return false;

      boolean this_present_hosts = true && this.isSetHosts();
      boolean that_present_hosts = true && that.isSetHosts();
      if (this_present_hosts || that_present_hosts) {
        if (!(this_present_hosts && that_present_hosts))
          return false;
        if (!this.hosts.equals(that.hosts))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_hosts = true && (isSetHosts());
      list.add(present_hosts);
      if (present_hosts)
        list.add(hosts);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(endMaintenance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetHosts()).compareTo(other.isSetHosts());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetHosts()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hosts, other.hosts);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endMaintenance_args(");
      boolean first = true;

      sb.append("hosts:");
      if (this.hosts == null) {
        sb.append("null");
      } else {
        sb.append(this.hosts);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (hosts != null) {
        hosts.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating endMaintenance_argsStandardScheme objects.
     */
    private static class endMaintenance_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public endMaintenance_argsStandardScheme getScheme() {
        return new endMaintenance_argsStandardScheme();
      }
    }

    /**
     * The Class endMaintenance_argsStandardScheme.
     */
    private static class endMaintenance_argsStandardScheme extends StandardScheme<endMaintenance_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, endMaintenance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // HOSTS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.hosts = new Hosts();
                struct.hosts.read(iprot);
                struct.setHostsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, endMaintenance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.hosts != null) {
          oprot.writeFieldBegin(HOSTS_FIELD_DESC);
          struct.hosts.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating endMaintenance_argsTupleScheme objects.
     */
    private static class endMaintenance_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public endMaintenance_argsTupleScheme getScheme() {
        return new endMaintenance_argsTupleScheme();
      }
    }

    /**
     * The Class endMaintenance_argsTupleScheme.
     */
    private static class endMaintenance_argsTupleScheme extends TupleScheme<endMaintenance_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endMaintenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetHosts()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetHosts()) {
          struct.hosts.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endMaintenance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.hosts = new Hosts();
          struct.hosts.read(iprot);
          struct.setHostsIsSet(true);
        }
      }
    }

  }

  /**
   * The Class endMaintenance_result.
   */
  public static class endMaintenance_result implements org.apache.thrift.TBase<endMaintenance_result, endMaintenance_result._Fields>, java.io.Serializable, Cloneable, Comparable<endMaintenance_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("endMaintenance_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new endMaintenance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new endMaintenance_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(endMaintenance_result.class, metaDataMap);
    }

    /**
     * Instantiates a new end maintenance result.
     */
    public endMaintenance_result() {
    }

    /**
     * Instantiates a new end maintenance result.
     *
     * @param success the success
     */
    public endMaintenance_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public endMaintenance_result(endMaintenance_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public endMaintenance_result deepCopy() {
      return new endMaintenance_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the end maintenance result
     */
    public endMaintenance_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof endMaintenance_result)
        return this.equals((endMaintenance_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(endMaintenance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(endMaintenance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("endMaintenance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating endMaintenance_resultStandardScheme objects.
     */
    private static class endMaintenance_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public endMaintenance_resultStandardScheme getScheme() {
        return new endMaintenance_resultStandardScheme();
      }
    }

    /**
     * The Class endMaintenance_resultStandardScheme.
     */
    private static class endMaintenance_resultStandardScheme extends StandardScheme<endMaintenance_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, endMaintenance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, endMaintenance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating endMaintenance_resultTupleScheme objects.
     */
    private static class endMaintenance_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public endMaintenance_resultTupleScheme getScheme() {
        return new endMaintenance_resultTupleScheme();
      }
    }

    /**
     * The Class endMaintenance_resultTupleScheme.
     */
    private static class endMaintenance_resultTupleScheme extends TupleScheme<endMaintenance_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, endMaintenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, endMaintenance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class snapshot_args.
   */
  public static class snapshot_args implements org.apache.thrift.TBase<snapshot_args, snapshot_args._Fields>, java.io.Serializable, Cloneable, Comparable<snapshot_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snapshot_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snapshot_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snapshot_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snapshot_args.class, metaDataMap);
    }

    /**
     * Instantiates a new snapshot args.
     */
    public snapshot_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public snapshot_args(snapshot_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public snapshot_args deepCopy() {
      return new snapshot_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snapshot_args)
        return this.equals((snapshot_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(snapshot_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(snapshot_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snapshot_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating snapshot_argsStandardScheme objects.
     */
    private static class snapshot_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public snapshot_argsStandardScheme getScheme() {
        return new snapshot_argsStandardScheme();
      }
    }

    /**
     * The Class snapshot_argsStandardScheme.
     */
    private static class snapshot_argsStandardScheme extends StandardScheme<snapshot_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, snapshot_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, snapshot_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating snapshot_argsTupleScheme objects.
     */
    private static class snapshot_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public snapshot_argsTupleScheme getScheme() {
        return new snapshot_argsTupleScheme();
      }
    }

    /**
     * The Class snapshot_argsTupleScheme.
     */
    private static class snapshot_argsTupleScheme extends TupleScheme<snapshot_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snapshot_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class snapshot_result.
   */
  public static class snapshot_result implements org.apache.thrift.TBase<snapshot_result, snapshot_result._Fields>, java.io.Serializable, Cloneable, Comparable<snapshot_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("snapshot_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new snapshot_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new snapshot_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(snapshot_result.class, metaDataMap);
    }

    /**
     * Instantiates a new snapshot result.
     */
    public snapshot_result() {
    }

    /**
     * Instantiates a new snapshot result.
     *
     * @param success the success
     */
    public snapshot_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public snapshot_result(snapshot_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public snapshot_result deepCopy() {
      return new snapshot_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the snapshot result
     */
    public snapshot_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof snapshot_result)
        return this.equals((snapshot_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(snapshot_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(snapshot_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("snapshot_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating snapshot_resultStandardScheme objects.
     */
    private static class snapshot_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public snapshot_resultStandardScheme getScheme() {
        return new snapshot_resultStandardScheme();
      }
    }

    /**
     * The Class snapshot_resultStandardScheme.
     */
    private static class snapshot_resultStandardScheme extends StandardScheme<snapshot_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, snapshot_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, snapshot_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating snapshot_resultTupleScheme objects.
     */
    private static class snapshot_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public snapshot_resultTupleScheme getScheme() {
        return new snapshot_resultTupleScheme();
      }
    }

    /**
     * The Class snapshot_resultTupleScheme.
     */
    private static class snapshot_resultTupleScheme extends TupleScheme<snapshot_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, snapshot_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class rewriteConfigs_args.
   */
  public static class rewriteConfigs_args implements org.apache.thrift.TBase<rewriteConfigs_args, rewriteConfigs_args._Fields>, java.io.Serializable, Cloneable, Comparable<rewriteConfigs_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewriteConfigs_args");

    /** The Constant REQUEST_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("request", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rewriteConfigs_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rewriteConfigs_argsTupleSchemeFactory());
    }

    /** The request. */
    public RewriteConfigsRequest request; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The request. */
      REQUEST((short)1, "request");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQUEST
            return REQUEST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQUEST, new org.apache.thrift.meta_data.FieldMetaData("request", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RewriteConfigsRequest.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewriteConfigs_args.class, metaDataMap);
    }

    /**
     * Instantiates a new rewrite configs args.
     */
    public rewriteConfigs_args() {
    }

    /**
     * Instantiates a new rewrite configs args.
     *
     * @param request the request
     */
    public rewriteConfigs_args(
      RewriteConfigsRequest request)
    {
      this();
      this.request = request;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public rewriteConfigs_args(rewriteConfigs_args other) {
      if (other.isSetRequest()) {
        this.request = new RewriteConfigsRequest(other.request);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public rewriteConfigs_args deepCopy() {
      return new rewriteConfigs_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.request = null;
    }

    /**
     * Gets the request.
     *
     * @return the request
     */
    public RewriteConfigsRequest getRequest() {
      return this.request;
    }

    /**
     * Sets the request.
     *
     * @param request the request
     * @return the rewrite configs args
     */
    public rewriteConfigs_args setRequest(RewriteConfigsRequest request) {
      this.request = request;
      return this;
    }

    /**
     * Unset request.
     */
    public void unsetRequest() {
      this.request = null;
    }

    /**
     *  Returns true if field request is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the request
     */
    public boolean isSetRequest() {
      return this.request != null;
    }

    /**
     * Sets the request is set.
     *
     * @param value the new request is set
     */
    public void setRequestIsSet(boolean value) {
      if (!value) {
        this.request = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQUEST:
        if (value == null) {
          unsetRequest();
        } else {
          setRequest((RewriteConfigsRequest)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQUEST:
        return getRequest();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQUEST:
        return isSetRequest();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewriteConfigs_args)
        return this.equals((rewriteConfigs_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(rewriteConfigs_args that) {
      if (that == null)
        return false;

      boolean this_present_request = true && this.isSetRequest();
      boolean that_present_request = true && that.isSetRequest();
      if (this_present_request || that_present_request) {
        if (!(this_present_request && that_present_request))
          return false;
        if (!this.request.equals(that.request))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_request = true && (isSetRequest());
      list.add(present_request);
      if (present_request)
        list.add(request);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(rewriteConfigs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRequest()).compareTo(other.isSetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.request, other.request);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewriteConfigs_args(");
      boolean first = true;

      sb.append("request:");
      if (this.request == null) {
        sb.append("null");
      } else {
        sb.append(this.request);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (request != null) {
        request.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating rewriteConfigs_argsStandardScheme objects.
     */
    private static class rewriteConfigs_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public rewriteConfigs_argsStandardScheme getScheme() {
        return new rewriteConfigs_argsStandardScheme();
      }
    }

    /**
     * The Class rewriteConfigs_argsStandardScheme.
     */
    private static class rewriteConfigs_argsStandardScheme extends StandardScheme<rewriteConfigs_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, rewriteConfigs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.request = new RewriteConfigsRequest();
                struct.request.read(iprot);
                struct.setRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, rewriteConfigs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.request != null) {
          oprot.writeFieldBegin(REQUEST_FIELD_DESC);
          struct.request.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating rewriteConfigs_argsTupleScheme objects.
     */
    private static class rewriteConfigs_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public rewriteConfigs_argsTupleScheme getScheme() {
        return new rewriteConfigs_argsTupleScheme();
      }
    }

    /**
     * The Class rewriteConfigs_argsTupleScheme.
     */
    private static class rewriteConfigs_argsTupleScheme extends TupleScheme<rewriteConfigs_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewriteConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRequest()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRequest()) {
          struct.request.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewriteConfigs_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.request = new RewriteConfigsRequest();
          struct.request.read(iprot);
          struct.setRequestIsSet(true);
        }
      }
    }

  }

  /**
   * The Class rewriteConfigs_result.
   */
  public static class rewriteConfigs_result implements org.apache.thrift.TBase<rewriteConfigs_result, rewriteConfigs_result._Fields>, java.io.Serializable, Cloneable, Comparable<rewriteConfigs_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rewriteConfigs_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new rewriteConfigs_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new rewriteConfigs_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rewriteConfigs_result.class, metaDataMap);
    }

    /**
     * Instantiates a new rewrite configs result.
     */
    public rewriteConfigs_result() {
    }

    /**
     * Instantiates a new rewrite configs result.
     *
     * @param success the success
     */
    public rewriteConfigs_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public rewriteConfigs_result(rewriteConfigs_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public rewriteConfigs_result deepCopy() {
      return new rewriteConfigs_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the rewrite configs result
     */
    public rewriteConfigs_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof rewriteConfigs_result)
        return this.equals((rewriteConfigs_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(rewriteConfigs_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(rewriteConfigs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("rewriteConfigs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating rewriteConfigs_resultStandardScheme objects.
     */
    private static class rewriteConfigs_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public rewriteConfigs_resultStandardScheme getScheme() {
        return new rewriteConfigs_resultStandardScheme();
      }
    }

    /**
     * The Class rewriteConfigs_resultStandardScheme.
     */
    private static class rewriteConfigs_resultStandardScheme extends StandardScheme<rewriteConfigs_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, rewriteConfigs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, rewriteConfigs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating rewriteConfigs_resultTupleScheme objects.
     */
    private static class rewriteConfigs_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public rewriteConfigs_resultTupleScheme getScheme() {
        return new rewriteConfigs_resultTupleScheme();
      }
    }

    /**
     * The Class rewriteConfigs_resultTupleScheme.
     */
    private static class rewriteConfigs_resultTupleScheme extends TupleScheme<rewriteConfigs_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rewriteConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rewriteConfigs_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class triggerExplicitTaskReconciliation_args.
   */
  public static class triggerExplicitTaskReconciliation_args implements org.apache.thrift.TBase<triggerExplicitTaskReconciliation_args, triggerExplicitTaskReconciliation_args._Fields>, java.io.Serializable, Cloneable, Comparable<triggerExplicitTaskReconciliation_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerExplicitTaskReconciliation_args");

    /** The Constant SETTINGS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SETTINGS_FIELD_DESC = new org.apache.thrift.protocol.TField("settings", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerExplicitTaskReconciliation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerExplicitTaskReconciliation_argsTupleSchemeFactory());
    }

    /** The settings. */
    public ExplicitReconciliationSettings settings; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The settings. */
      SETTINGS((short)1, "settings");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SETTINGS
            return SETTINGS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SETTINGS, new org.apache.thrift.meta_data.FieldMetaData("settings", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ExplicitReconciliationSettings.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerExplicitTaskReconciliation_args.class, metaDataMap);
    }

    /**
     * Instantiates a new trigger explicit task reconciliation args.
     */
    public triggerExplicitTaskReconciliation_args() {
    }

    /**
     * Instantiates a new trigger explicit task reconciliation args.
     *
     * @param settings the settings
     */
    public triggerExplicitTaskReconciliation_args(
      ExplicitReconciliationSettings settings)
    {
      this();
      this.settings = settings;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public triggerExplicitTaskReconciliation_args(triggerExplicitTaskReconciliation_args other) {
      if (other.isSetSettings()) {
        this.settings = new ExplicitReconciliationSettings(other.settings);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public triggerExplicitTaskReconciliation_args deepCopy() {
      return new triggerExplicitTaskReconciliation_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.settings = null;
    }

    /**
     * Gets the settings.
     *
     * @return the settings
     */
    public ExplicitReconciliationSettings getSettings() {
      return this.settings;
    }

    /**
     * Sets the settings.
     *
     * @param settings the settings
     * @return the trigger explicit task reconciliation args
     */
    public triggerExplicitTaskReconciliation_args setSettings(ExplicitReconciliationSettings settings) {
      this.settings = settings;
      return this;
    }

    /**
     * Unset settings.
     */
    public void unsetSettings() {
      this.settings = null;
    }

    /**
     *  Returns true if field settings is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the settings
     */
    public boolean isSetSettings() {
      return this.settings != null;
    }

    /**
     * Sets the settings is set.
     *
     * @param value the new settings is set
     */
    public void setSettingsIsSet(boolean value) {
      if (!value) {
        this.settings = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SETTINGS:
        if (value == null) {
          unsetSettings();
        } else {
          setSettings((ExplicitReconciliationSettings)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SETTINGS:
        return getSettings();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SETTINGS:
        return isSetSettings();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerExplicitTaskReconciliation_args)
        return this.equals((triggerExplicitTaskReconciliation_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(triggerExplicitTaskReconciliation_args that) {
      if (that == null)
        return false;

      boolean this_present_settings = true && this.isSetSettings();
      boolean that_present_settings = true && that.isSetSettings();
      if (this_present_settings || that_present_settings) {
        if (!(this_present_settings && that_present_settings))
          return false;
        if (!this.settings.equals(that.settings))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_settings = true && (isSetSettings());
      list.add(present_settings);
      if (present_settings)
        list.add(settings);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(triggerExplicitTaskReconciliation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSettings()).compareTo(other.isSetSettings());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSettings()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.settings, other.settings);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerExplicitTaskReconciliation_args(");
      boolean first = true;

      sb.append("settings:");
      if (this.settings == null) {
        sb.append("null");
      } else {
        sb.append(this.settings);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (settings != null) {
        settings.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating triggerExplicitTaskReconciliation_argsStandardScheme objects.
     */
    private static class triggerExplicitTaskReconciliation_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerExplicitTaskReconciliation_argsStandardScheme getScheme() {
        return new triggerExplicitTaskReconciliation_argsStandardScheme();
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation_argsStandardScheme.
     */
    private static class triggerExplicitTaskReconciliation_argsStandardScheme extends StandardScheme<triggerExplicitTaskReconciliation_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerExplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SETTINGS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.settings = new ExplicitReconciliationSettings();
                struct.settings.read(iprot);
                struct.setSettingsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerExplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.settings != null) {
          oprot.writeFieldBegin(SETTINGS_FIELD_DESC);
          struct.settings.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating triggerExplicitTaskReconciliation_argsTupleScheme objects.
     */
    private static class triggerExplicitTaskReconciliation_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerExplicitTaskReconciliation_argsTupleScheme getScheme() {
        return new triggerExplicitTaskReconciliation_argsTupleScheme();
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation_argsTupleScheme.
     */
    private static class triggerExplicitTaskReconciliation_argsTupleScheme extends TupleScheme<triggerExplicitTaskReconciliation_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerExplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSettings()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSettings()) {
          struct.settings.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerExplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.settings = new ExplicitReconciliationSettings();
          struct.settings.read(iprot);
          struct.setSettingsIsSet(true);
        }
      }
    }

  }

  /**
   * The Class triggerExplicitTaskReconciliation_result.
   */
  public static class triggerExplicitTaskReconciliation_result implements org.apache.thrift.TBase<triggerExplicitTaskReconciliation_result, triggerExplicitTaskReconciliation_result._Fields>, java.io.Serializable, Cloneable, Comparable<triggerExplicitTaskReconciliation_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerExplicitTaskReconciliation_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerExplicitTaskReconciliation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerExplicitTaskReconciliation_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerExplicitTaskReconciliation_result.class, metaDataMap);
    }

    /**
     * Instantiates a new trigger explicit task reconciliation result.
     */
    public triggerExplicitTaskReconciliation_result() {
    }

    /**
     * Instantiates a new trigger explicit task reconciliation result.
     *
     * @param success the success
     */
    public triggerExplicitTaskReconciliation_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public triggerExplicitTaskReconciliation_result(triggerExplicitTaskReconciliation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public triggerExplicitTaskReconciliation_result deepCopy() {
      return new triggerExplicitTaskReconciliation_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the trigger explicit task reconciliation result
     */
    public triggerExplicitTaskReconciliation_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerExplicitTaskReconciliation_result)
        return this.equals((triggerExplicitTaskReconciliation_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(triggerExplicitTaskReconciliation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(triggerExplicitTaskReconciliation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerExplicitTaskReconciliation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating triggerExplicitTaskReconciliation_resultStandardScheme objects.
     */
    private static class triggerExplicitTaskReconciliation_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerExplicitTaskReconciliation_resultStandardScheme getScheme() {
        return new triggerExplicitTaskReconciliation_resultStandardScheme();
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation_resultStandardScheme.
     */
    private static class triggerExplicitTaskReconciliation_resultStandardScheme extends StandardScheme<triggerExplicitTaskReconciliation_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerExplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerExplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating triggerExplicitTaskReconciliation_resultTupleScheme objects.
     */
    private static class triggerExplicitTaskReconciliation_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerExplicitTaskReconciliation_resultTupleScheme getScheme() {
        return new triggerExplicitTaskReconciliation_resultTupleScheme();
      }
    }

    /**
     * The Class triggerExplicitTaskReconciliation_resultTupleScheme.
     */
    private static class triggerExplicitTaskReconciliation_resultTupleScheme extends TupleScheme<triggerExplicitTaskReconciliation_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerExplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerExplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  /**
   * The Class triggerImplicitTaskReconciliation_args.
   */
  public static class triggerImplicitTaskReconciliation_args implements org.apache.thrift.TBase<triggerImplicitTaskReconciliation_args, triggerImplicitTaskReconciliation_args._Fields>, java.io.Serializable, Cloneable, Comparable<triggerImplicitTaskReconciliation_args>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerImplicitTaskReconciliation_args");


    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerImplicitTaskReconciliation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerImplicitTaskReconciliation_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }
    
    /** The Constant metaDataMap. */
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerImplicitTaskReconciliation_args.class, metaDataMap);
    }

    /**
     * Instantiates a new trigger implicit task reconciliation args.
     */
    public triggerImplicitTaskReconciliation_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public triggerImplicitTaskReconciliation_args(triggerImplicitTaskReconciliation_args other) {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public triggerImplicitTaskReconciliation_args deepCopy() {
      return new triggerImplicitTaskReconciliation_args(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerImplicitTaskReconciliation_args)
        return this.equals((triggerImplicitTaskReconciliation_args)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(triggerImplicitTaskReconciliation_args that) {
      if (that == null)
        return false;

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(triggerImplicitTaskReconciliation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerImplicitTaskReconciliation_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating triggerImplicitTaskReconciliation_argsStandardScheme objects.
     */
    private static class triggerImplicitTaskReconciliation_argsStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerImplicitTaskReconciliation_argsStandardScheme getScheme() {
        return new triggerImplicitTaskReconciliation_argsStandardScheme();
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation_argsStandardScheme.
     */
    private static class triggerImplicitTaskReconciliation_argsStandardScheme extends StandardScheme<triggerImplicitTaskReconciliation_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerImplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerImplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating triggerImplicitTaskReconciliation_argsTupleScheme objects.
     */
    private static class triggerImplicitTaskReconciliation_argsTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerImplicitTaskReconciliation_argsTupleScheme getScheme() {
        return new triggerImplicitTaskReconciliation_argsTupleScheme();
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation_argsTupleScheme.
     */
    private static class triggerImplicitTaskReconciliation_argsTupleScheme extends TupleScheme<triggerImplicitTaskReconciliation_args> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerImplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerImplicitTaskReconciliation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  /**
   * The Class triggerImplicitTaskReconciliation_result.
   */
  public static class triggerImplicitTaskReconciliation_result implements org.apache.thrift.TBase<triggerImplicitTaskReconciliation_result, triggerImplicitTaskReconciliation_result._Fields>, java.io.Serializable, Cloneable, Comparable<triggerImplicitTaskReconciliation_result>   {
    
    /** The Constant STRUCT_DESC. */
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("triggerImplicitTaskReconciliation_result");

    /** The Constant SUCCESS_FIELD_DESC. */
    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    /** The Constant schemes. */
    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new triggerImplicitTaskReconciliation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new triggerImplicitTaskReconciliation_resultTupleSchemeFactory());
    }

    /** The success. */
    public Response success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      
      /** The success. */
      SUCCESS((short)0, "success");

      /** The Constant byName. */
      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       *
       * @param fieldId the field id
       * @return the fields
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       *
       * @param name the name
       * @return the fields
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      /** The thrift id. */
      private final short _thriftId;
      
      /** The field name. */
      private final String _fieldName;

      /**
       * Instantiates a new fields.
       *
       * @param thriftId the thrift id
       * @param fieldName the field name
       */
      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getThriftFieldId()
       */
      public short getThriftFieldId() {
        return _thriftId;
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.TFieldIdEnum#getFieldName()
       */
      public String getFieldName() {
        return _fieldName;
      }
    }

    /** The Constant metaDataMap. */
    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Response.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(triggerImplicitTaskReconciliation_result.class, metaDataMap);
    }

    /**
     * Instantiates a new trigger implicit task reconciliation result.
     */
    public triggerImplicitTaskReconciliation_result() {
    }

    /**
     * Instantiates a new trigger implicit task reconciliation result.
     *
     * @param success the success
     */
    public triggerImplicitTaskReconciliation_result(
      Response success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     *
     * @param other the other
     */
    public triggerImplicitTaskReconciliation_result(triggerImplicitTaskReconciliation_result other) {
      if (other.isSetSuccess()) {
        this.success = new Response(other.success);
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#deepCopy()
     */
    public triggerImplicitTaskReconciliation_result deepCopy() {
      return new triggerImplicitTaskReconciliation_result(this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#clear()
     */
    @Override
    public void clear() {
      this.success = null;
    }

    /**
     * Gets the success.
     *
     * @return the success
     */
    public Response getSuccess() {
      return this.success;
    }

    /**
     * Sets the success.
     *
     * @param success the success
     * @return the trigger implicit task reconciliation result
     */
    public triggerImplicitTaskReconciliation_result setSuccess(Response success) {
      this.success = success;
      return this;
    }

    /**
     * Unset success.
     */
    public void unsetSuccess() {
      this.success = null;
    }

    /**
     *  Returns true if field success is set (has been assigned a value) and false otherwise.
     *
     * @return true, if is sets the success
     */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    /**
     * Sets the success is set.
     *
     * @param value the new success is set
     */
    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#setFieldValue(org.apache.thrift.TFieldIdEnum, java.lang.Object)
     */
    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Response)value);
        }
        break;

      }
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#getFieldValue(org.apache.thrift.TFieldIdEnum)
     */
    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /**
     *  Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise.
     *
     * @param field the field
     * @return true, if is sets the
     */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    /* (non-Javadoc)
     * @see java.lang.Object#equals(java.lang.Object)
     */
    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof triggerImplicitTaskReconciliation_result)
        return this.equals((triggerImplicitTaskReconciliation_result)that);
      return false;
    }

    /**
     * Equals.
     *
     * @param that the that
     * @return true, if successful
     */
    public boolean equals(triggerImplicitTaskReconciliation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    /* (non-Javadoc)
     * @see java.lang.Object#hashCode()
     */
    @Override
    public int hashCode() {
      List<Object> list = new ArrayList<Object>();

      boolean present_success = true && (isSetSuccess());
      list.add(present_success);
      if (present_success)
        list.add(success);

      return list.hashCode();
    }

    /* (non-Javadoc)
     * @see java.lang.Comparable#compareTo(java.lang.Object)
     */
    @Override
    public int compareTo(triggerImplicitTaskReconciliation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#fieldForId(int)
     */
    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#read(org.apache.thrift.protocol.TProtocol)
     */
    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    /* (non-Javadoc)
     * @see org.apache.thrift.TBase#write(org.apache.thrift.protocol.TProtocol)
     */
    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    /* (non-Javadoc)
     * @see java.lang.Object#toString()
     */
    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("triggerImplicitTaskReconciliation_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    /**
     * Validate.
     *
     * @throws TException the t exception
     */
    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    /**
     * Write object.
     *
     * @param out the out
     * @throws IOException Signals that an I/O exception has occurred.
     */
    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * Read object.
     *
     * @param in the in
     * @throws IOException Signals that an I/O exception has occurred.
     * @throws ClassNotFoundException the class not found exception
     */
    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    /**
     * A factory for creating triggerImplicitTaskReconciliation_resultStandardScheme objects.
     */
    private static class triggerImplicitTaskReconciliation_resultStandardSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerImplicitTaskReconciliation_resultStandardScheme getScheme() {
        return new triggerImplicitTaskReconciliation_resultStandardScheme();
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation_resultStandardScheme.
     */
    private static class triggerImplicitTaskReconciliation_resultStandardScheme extends StandardScheme<triggerImplicitTaskReconciliation_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void read(org.apache.thrift.protocol.TProtocol iprot, triggerImplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Response();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      public void write(org.apache.thrift.protocol.TProtocol oprot, triggerImplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    /**
     * A factory for creating triggerImplicitTaskReconciliation_resultTupleScheme objects.
     */
    private static class triggerImplicitTaskReconciliation_resultTupleSchemeFactory implements SchemeFactory {
      
      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.SchemeFactory#getScheme()
       */
      public triggerImplicitTaskReconciliation_resultTupleScheme getScheme() {
        return new triggerImplicitTaskReconciliation_resultTupleScheme();
      }
    }

    /**
     * The Class triggerImplicitTaskReconciliation_resultTupleScheme.
     */
    private static class triggerImplicitTaskReconciliation_resultTupleScheme extends TupleScheme<triggerImplicitTaskReconciliation_result> {

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#write(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, triggerImplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      /* (non-Javadoc)
       * @see org.apache.thrift.scheme.IScheme#read(org.apache.thrift.protocol.TProtocol, org.apache.thrift.TBase)
       */
      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, triggerImplicitTaskReconciliation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new Response();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
