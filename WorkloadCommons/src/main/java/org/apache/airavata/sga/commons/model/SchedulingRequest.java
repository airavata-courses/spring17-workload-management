/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.sga.commons.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-23")
public class SchedulingRequest implements org.apache.thrift.TBase<SchedulingRequest, SchedulingRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SchedulingRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SchedulingRequest");

  private static final org.apache.thrift.protocol.TField TASK_CONTEXT_FIELD_DESC = new org.apache.thrift.protocol.TField("taskContext", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_PRIORITY_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentPriority", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCHEDULE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("scheduleTime", org.apache.thrift.protocol.TType.STRING, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SchedulingRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SchedulingRequestTupleSchemeFactory());
  }

  public TaskContext taskContext; // required
  /**
   * 
   * @see ExperimentPriority
   */
  public ExperimentPriority experimentPriority; // required
  public String scheduleTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TASK_CONTEXT((short)1, "taskContext"),
    /**
     * 
     * @see ExperimentPriority
     */
    EXPERIMENT_PRIORITY((short)2, "experimentPriority"),
    SCHEDULE_TIME((short)3, "scheduleTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TASK_CONTEXT
          return TASK_CONTEXT;
        case 2: // EXPERIMENT_PRIORITY
          return EXPERIMENT_PRIORITY;
        case 3: // SCHEDULE_TIME
          return SCHEDULE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.SCHEDULE_TIME};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TASK_CONTEXT, new org.apache.thrift.meta_data.FieldMetaData("taskContext", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TaskContext.class)));
    tmpMap.put(_Fields.EXPERIMENT_PRIORITY, new org.apache.thrift.meta_data.FieldMetaData("experimentPriority", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ExperimentPriority.class)));
    tmpMap.put(_Fields.SCHEDULE_TIME, new org.apache.thrift.meta_data.FieldMetaData("scheduleTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "timestamp")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SchedulingRequest.class, metaDataMap);
  }

  public SchedulingRequest() {
    this.experimentPriority = org.apache.airavata.sga.commons.model.ExperimentPriority.NORMAL;

  }

  public SchedulingRequest(
    TaskContext taskContext,
    ExperimentPriority experimentPriority)
  {
    this();
    this.taskContext = taskContext;
    this.experimentPriority = experimentPriority;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SchedulingRequest(SchedulingRequest other) {
    if (other.isSetTaskContext()) {
      this.taskContext = new TaskContext(other.taskContext);
    }
    if (other.isSetExperimentPriority()) {
      this.experimentPriority = other.experimentPriority;
    }
    if (other.isSetScheduleTime()) {
      this.scheduleTime = other.scheduleTime;
    }
  }

  public SchedulingRequest deepCopy() {
    return new SchedulingRequest(this);
  }

  @Override
  public void clear() {
    this.taskContext = null;
    this.experimentPriority = org.apache.airavata.sga.commons.model.ExperimentPriority.NORMAL;

    this.scheduleTime = null;
  }

  public TaskContext getTaskContext() {
    return this.taskContext;
  }

  public SchedulingRequest setTaskContext(TaskContext taskContext) {
    this.taskContext = taskContext;
    return this;
  }

  public void unsetTaskContext() {
    this.taskContext = null;
  }

  /** Returns true if field taskContext is set (has been assigned a value) and false otherwise */
  public boolean isSetTaskContext() {
    return this.taskContext != null;
  }

  public void setTaskContextIsSet(boolean value) {
    if (!value) {
      this.taskContext = null;
    }
  }

  /**
   * 
   * @see ExperimentPriority
   */
  public ExperimentPriority getExperimentPriority() {
    return this.experimentPriority;
  }

  /**
   * 
   * @see ExperimentPriority
   */
  public SchedulingRequest setExperimentPriority(ExperimentPriority experimentPriority) {
    this.experimentPriority = experimentPriority;
    return this;
  }

  public void unsetExperimentPriority() {
    this.experimentPriority = null;
  }

  /** Returns true if field experimentPriority is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentPriority() {
    return this.experimentPriority != null;
  }

  public void setExperimentPriorityIsSet(boolean value) {
    if (!value) {
      this.experimentPriority = null;
    }
  }

  public String getScheduleTime() {
    return this.scheduleTime;
  }

  public SchedulingRequest setScheduleTime(String scheduleTime) {
    this.scheduleTime = scheduleTime;
    return this;
  }

  public void unsetScheduleTime() {
    this.scheduleTime = null;
  }

  /** Returns true if field scheduleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetScheduleTime() {
    return this.scheduleTime != null;
  }

  public void setScheduleTimeIsSet(boolean value) {
    if (!value) {
      this.scheduleTime = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TASK_CONTEXT:
      if (value == null) {
        unsetTaskContext();
      } else {
        setTaskContext((TaskContext)value);
      }
      break;

    case EXPERIMENT_PRIORITY:
      if (value == null) {
        unsetExperimentPriority();
      } else {
        setExperimentPriority((ExperimentPriority)value);
      }
      break;

    case SCHEDULE_TIME:
      if (value == null) {
        unsetScheduleTime();
      } else {
        setScheduleTime((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TASK_CONTEXT:
      return getTaskContext();

    case EXPERIMENT_PRIORITY:
      return getExperimentPriority();

    case SCHEDULE_TIME:
      return getScheduleTime();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TASK_CONTEXT:
      return isSetTaskContext();
    case EXPERIMENT_PRIORITY:
      return isSetExperimentPriority();
    case SCHEDULE_TIME:
      return isSetScheduleTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SchedulingRequest)
      return this.equals((SchedulingRequest)that);
    return false;
  }

  public boolean equals(SchedulingRequest that) {
    if (that == null)
      return false;

    boolean this_present_taskContext = true && this.isSetTaskContext();
    boolean that_present_taskContext = true && that.isSetTaskContext();
    if (this_present_taskContext || that_present_taskContext) {
      if (!(this_present_taskContext && that_present_taskContext))
        return false;
      if (!this.taskContext.equals(that.taskContext))
        return false;
    }

    boolean this_present_experimentPriority = true && this.isSetExperimentPriority();
    boolean that_present_experimentPriority = true && that.isSetExperimentPriority();
    if (this_present_experimentPriority || that_present_experimentPriority) {
      if (!(this_present_experimentPriority && that_present_experimentPriority))
        return false;
      if (!this.experimentPriority.equals(that.experimentPriority))
        return false;
    }

    boolean this_present_scheduleTime = true && this.isSetScheduleTime();
    boolean that_present_scheduleTime = true && that.isSetScheduleTime();
    if (this_present_scheduleTime || that_present_scheduleTime) {
      if (!(this_present_scheduleTime && that_present_scheduleTime))
        return false;
      if (!this.scheduleTime.equals(that.scheduleTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_taskContext = true && (isSetTaskContext());
    list.add(present_taskContext);
    if (present_taskContext)
      list.add(taskContext);

    boolean present_experimentPriority = true && (isSetExperimentPriority());
    list.add(present_experimentPriority);
    if (present_experimentPriority)
      list.add(experimentPriority.getValue());

    boolean present_scheduleTime = true && (isSetScheduleTime());
    list.add(present_scheduleTime);
    if (present_scheduleTime)
      list.add(scheduleTime);

    return list.hashCode();
  }

  @Override
  public int compareTo(SchedulingRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTaskContext()).compareTo(other.isSetTaskContext());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTaskContext()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskContext, other.taskContext);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentPriority()).compareTo(other.isSetExperimentPriority());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentPriority()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentPriority, other.experimentPriority);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScheduleTime()).compareTo(other.isSetScheduleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScheduleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scheduleTime, other.scheduleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SchedulingRequest(");
    boolean first = true;

    sb.append("taskContext:");
    if (this.taskContext == null) {
      sb.append("null");
    } else {
      sb.append(this.taskContext);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentPriority:");
    if (this.experimentPriority == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentPriority);
    }
    first = false;
    if (isSetScheduleTime()) {
      if (!first) sb.append(", ");
      sb.append("scheduleTime:");
      if (this.scheduleTime == null) {
        sb.append("null");
      } else {
        sb.append(this.scheduleTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (taskContext == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'taskContext' was not present! Struct: " + toString());
    }
    if (experimentPriority == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'experimentPriority' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (taskContext != null) {
      taskContext.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SchedulingRequestStandardSchemeFactory implements SchemeFactory {
    public SchedulingRequestStandardScheme getScheme() {
      return new SchedulingRequestStandardScheme();
    }
  }

  private static class SchedulingRequestStandardScheme extends StandardScheme<SchedulingRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SchedulingRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TASK_CONTEXT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.taskContext = new TaskContext();
              struct.taskContext.read(iprot);
              struct.setTaskContextIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERIMENT_PRIORITY
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.experimentPriority = org.apache.airavata.sga.commons.model.ExperimentPriority.findByValue(iprot.readI32());
              struct.setExperimentPriorityIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCHEDULE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scheduleTime = iprot.readString();
              struct.setScheduleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SchedulingRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.taskContext != null) {
        oprot.writeFieldBegin(TASK_CONTEXT_FIELD_DESC);
        struct.taskContext.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.experimentPriority != null) {
        oprot.writeFieldBegin(EXPERIMENT_PRIORITY_FIELD_DESC);
        oprot.writeI32(struct.experimentPriority.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.scheduleTime != null) {
        if (struct.isSetScheduleTime()) {
          oprot.writeFieldBegin(SCHEDULE_TIME_FIELD_DESC);
          oprot.writeString(struct.scheduleTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SchedulingRequestTupleSchemeFactory implements SchemeFactory {
    public SchedulingRequestTupleScheme getScheme() {
      return new SchedulingRequestTupleScheme();
    }
  }

  private static class SchedulingRequestTupleScheme extends TupleScheme<SchedulingRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SchedulingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      struct.taskContext.write(oprot);
      oprot.writeI32(struct.experimentPriority.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetScheduleTime()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetScheduleTime()) {
        oprot.writeString(struct.scheduleTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SchedulingRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.taskContext = new TaskContext();
      struct.taskContext.read(iprot);
      struct.setTaskContextIsSet(true);
      struct.experimentPriority = org.apache.airavata.sga.commons.model.ExperimentPriority.findByValue(iprot.readI32());
      struct.setExperimentPriorityIsSet(true);
      BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.scheduleTime = iprot.readString();
        struct.setScheduleTimeIsSet(true);
      }
    }
  }

}

