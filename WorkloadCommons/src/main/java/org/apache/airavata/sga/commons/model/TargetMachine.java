/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.airavata.sga.commons.model;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-22")
public class TargetMachine implements org.apache.thrift.TBase<TargetMachine, TargetMachine._Fields>, java.io.Serializable, Cloneable, Comparable<TargetMachine> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TargetMachine");

  private static final org.apache.thrift.protocol.TField HOSTNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("hostname", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField SCRATCH_DIR_FIELD_DESC = new org.apache.thrift.protocol.TField("scratchDir", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField LOGIN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("loginId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField DT_PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("dtProtocol", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField MACHINE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("machineType", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TargetMachineStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TargetMachineTupleSchemeFactory());
  }

  public String hostname; // required
  public int port; // required
  public String scratchDir; // required
  public String loginId; // required
  /**
   * 
   * @see DataTransferProtocol
   */
  public DataTransferProtocol dtProtocol; // required
  /**
   * 
   * @see MachineType
   */
  public MachineType machineType; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    HOSTNAME((short)1, "hostname"),
    PORT((short)2, "port"),
    SCRATCH_DIR((short)3, "scratchDir"),
    LOGIN_ID((short)4, "loginId"),
    /**
     * 
     * @see DataTransferProtocol
     */
    DT_PROTOCOL((short)5, "dtProtocol"),
    /**
     * 
     * @see MachineType
     */
    MACHINE_TYPE((short)6, "machineType");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // HOSTNAME
          return HOSTNAME;
        case 2: // PORT
          return PORT;
        case 3: // SCRATCH_DIR
          return SCRATCH_DIR;
        case 4: // LOGIN_ID
          return LOGIN_ID;
        case 5: // DT_PROTOCOL
          return DT_PROTOCOL;
        case 6: // MACHINE_TYPE
          return MACHINE_TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PORT_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.HOSTNAME, new org.apache.thrift.meta_data.FieldMetaData("hostname", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32        , "integer")));
    tmpMap.put(_Fields.SCRATCH_DIR, new org.apache.thrift.meta_data.FieldMetaData("scratchDir", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOGIN_ID, new org.apache.thrift.meta_data.FieldMetaData("loginId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DT_PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("dtProtocol", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, DataTransferProtocol.class)));
    tmpMap.put(_Fields.MACHINE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("machineType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MachineType.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TargetMachine.class, metaDataMap);
  }

  public TargetMachine() {
  }

  public TargetMachine(
    String hostname,
    int port,
    String scratchDir,
    String loginId,
    DataTransferProtocol dtProtocol,
    MachineType machineType)
  {
    this();
    this.hostname = hostname;
    this.port = port;
    setPortIsSet(true);
    this.scratchDir = scratchDir;
    this.loginId = loginId;
    this.dtProtocol = dtProtocol;
    this.machineType = machineType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TargetMachine(TargetMachine other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetHostname()) {
      this.hostname = other.hostname;
    }
    this.port = other.port;
    if (other.isSetScratchDir()) {
      this.scratchDir = other.scratchDir;
    }
    if (other.isSetLoginId()) {
      this.loginId = other.loginId;
    }
    if (other.isSetDtProtocol()) {
      this.dtProtocol = other.dtProtocol;
    }
    if (other.isSetMachineType()) {
      this.machineType = other.machineType;
    }
  }

  public TargetMachine deepCopy() {
    return new TargetMachine(this);
  }

  @Override
  public void clear() {
    this.hostname = null;
    setPortIsSet(false);
    this.port = 0;
    this.scratchDir = null;
    this.loginId = null;
    this.dtProtocol = null;
    this.machineType = null;
  }

  public String getHostname() {
    return this.hostname;
  }

  public TargetMachine setHostname(String hostname) {
    this.hostname = hostname;
    return this;
  }

  public void unsetHostname() {
    this.hostname = null;
  }

  /** Returns true if field hostname is set (has been assigned a value) and false otherwise */
  public boolean isSetHostname() {
    return this.hostname != null;
  }

  public void setHostnameIsSet(boolean value) {
    if (!value) {
      this.hostname = null;
    }
  }

  public int getPort() {
    return this.port;
  }

  public TargetMachine setPort(int port) {
    this.port = port;
    setPortIsSet(true);
    return this;
  }

  public void unsetPort() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
  }

  public void setPortIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
  }

  public String getScratchDir() {
    return this.scratchDir;
  }

  public TargetMachine setScratchDir(String scratchDir) {
    this.scratchDir = scratchDir;
    return this;
  }

  public void unsetScratchDir() {
    this.scratchDir = null;
  }

  /** Returns true if field scratchDir is set (has been assigned a value) and false otherwise */
  public boolean isSetScratchDir() {
    return this.scratchDir != null;
  }

  public void setScratchDirIsSet(boolean value) {
    if (!value) {
      this.scratchDir = null;
    }
  }

  public String getLoginId() {
    return this.loginId;
  }

  public TargetMachine setLoginId(String loginId) {
    this.loginId = loginId;
    return this;
  }

  public void unsetLoginId() {
    this.loginId = null;
  }

  /** Returns true if field loginId is set (has been assigned a value) and false otherwise */
  public boolean isSetLoginId() {
    return this.loginId != null;
  }

  public void setLoginIdIsSet(boolean value) {
    if (!value) {
      this.loginId = null;
    }
  }

  /**
   * 
   * @see DataTransferProtocol
   */
  public DataTransferProtocol getDtProtocol() {
    return this.dtProtocol;
  }

  /**
   * 
   * @see DataTransferProtocol
   */
  public TargetMachine setDtProtocol(DataTransferProtocol dtProtocol) {
    this.dtProtocol = dtProtocol;
    return this;
  }

  public void unsetDtProtocol() {
    this.dtProtocol = null;
  }

  /** Returns true if field dtProtocol is set (has been assigned a value) and false otherwise */
  public boolean isSetDtProtocol() {
    return this.dtProtocol != null;
  }

  public void setDtProtocolIsSet(boolean value) {
    if (!value) {
      this.dtProtocol = null;
    }
  }

  /**
   * 
   * @see MachineType
   */
  public MachineType getMachineType() {
    return this.machineType;
  }

  /**
   * 
   * @see MachineType
   */
  public TargetMachine setMachineType(MachineType machineType) {
    this.machineType = machineType;
    return this;
  }

  public void unsetMachineType() {
    this.machineType = null;
  }

  /** Returns true if field machineType is set (has been assigned a value) and false otherwise */
  public boolean isSetMachineType() {
    return this.machineType != null;
  }

  public void setMachineTypeIsSet(boolean value) {
    if (!value) {
      this.machineType = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case HOSTNAME:
      if (value == null) {
        unsetHostname();
      } else {
        setHostname((String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((Integer)value);
      }
      break;

    case SCRATCH_DIR:
      if (value == null) {
        unsetScratchDir();
      } else {
        setScratchDir((String)value);
      }
      break;

    case LOGIN_ID:
      if (value == null) {
        unsetLoginId();
      } else {
        setLoginId((String)value);
      }
      break;

    case DT_PROTOCOL:
      if (value == null) {
        unsetDtProtocol();
      } else {
        setDtProtocol((DataTransferProtocol)value);
      }
      break;

    case MACHINE_TYPE:
      if (value == null) {
        unsetMachineType();
      } else {
        setMachineType((MachineType)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case HOSTNAME:
      return getHostname();

    case PORT:
      return getPort();

    case SCRATCH_DIR:
      return getScratchDir();

    case LOGIN_ID:
      return getLoginId();

    case DT_PROTOCOL:
      return getDtProtocol();

    case MACHINE_TYPE:
      return getMachineType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case HOSTNAME:
      return isSetHostname();
    case PORT:
      return isSetPort();
    case SCRATCH_DIR:
      return isSetScratchDir();
    case LOGIN_ID:
      return isSetLoginId();
    case DT_PROTOCOL:
      return isSetDtProtocol();
    case MACHINE_TYPE:
      return isSetMachineType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TargetMachine)
      return this.equals((TargetMachine)that);
    return false;
  }

  public boolean equals(TargetMachine that) {
    if (that == null)
      return false;

    boolean this_present_hostname = true && this.isSetHostname();
    boolean that_present_hostname = true && that.isSetHostname();
    if (this_present_hostname || that_present_hostname) {
      if (!(this_present_hostname && that_present_hostname))
        return false;
      if (!this.hostname.equals(that.hostname))
        return false;
    }

    boolean this_present_port = true;
    boolean that_present_port = true;
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (this.port != that.port)
        return false;
    }

    boolean this_present_scratchDir = true && this.isSetScratchDir();
    boolean that_present_scratchDir = true && that.isSetScratchDir();
    if (this_present_scratchDir || that_present_scratchDir) {
      if (!(this_present_scratchDir && that_present_scratchDir))
        return false;
      if (!this.scratchDir.equals(that.scratchDir))
        return false;
    }

    boolean this_present_loginId = true && this.isSetLoginId();
    boolean that_present_loginId = true && that.isSetLoginId();
    if (this_present_loginId || that_present_loginId) {
      if (!(this_present_loginId && that_present_loginId))
        return false;
      if (!this.loginId.equals(that.loginId))
        return false;
    }

    boolean this_present_dtProtocol = true && this.isSetDtProtocol();
    boolean that_present_dtProtocol = true && that.isSetDtProtocol();
    if (this_present_dtProtocol || that_present_dtProtocol) {
      if (!(this_present_dtProtocol && that_present_dtProtocol))
        return false;
      if (!this.dtProtocol.equals(that.dtProtocol))
        return false;
    }

    boolean this_present_machineType = true && this.isSetMachineType();
    boolean that_present_machineType = true && that.isSetMachineType();
    if (this_present_machineType || that_present_machineType) {
      if (!(this_present_machineType && that_present_machineType))
        return false;
      if (!this.machineType.equals(that.machineType))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_hostname = true && (isSetHostname());
    list.add(present_hostname);
    if (present_hostname)
      list.add(hostname);

    boolean present_port = true;
    list.add(present_port);
    if (present_port)
      list.add(port);

    boolean present_scratchDir = true && (isSetScratchDir());
    list.add(present_scratchDir);
    if (present_scratchDir)
      list.add(scratchDir);

    boolean present_loginId = true && (isSetLoginId());
    list.add(present_loginId);
    if (present_loginId)
      list.add(loginId);

    boolean present_dtProtocol = true && (isSetDtProtocol());
    list.add(present_dtProtocol);
    if (present_dtProtocol)
      list.add(dtProtocol.getValue());

    boolean present_machineType = true && (isSetMachineType());
    list.add(present_machineType);
    if (present_machineType)
      list.add(machineType.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(TargetMachine other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetHostname()).compareTo(other.isSetHostname());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHostname()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hostname, other.hostname);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetScratchDir()).compareTo(other.isSetScratchDir());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScratchDir()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scratchDir, other.scratchDir);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLoginId()).compareTo(other.isSetLoginId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLoginId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loginId, other.loginId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDtProtocol()).compareTo(other.isSetDtProtocol());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDtProtocol()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dtProtocol, other.dtProtocol);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMachineType()).compareTo(other.isSetMachineType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMachineType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.machineType, other.machineType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TargetMachine(");
    boolean first = true;

    sb.append("hostname:");
    if (this.hostname == null) {
      sb.append("null");
    } else {
      sb.append(this.hostname);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("port:");
    sb.append(this.port);
    first = false;
    if (!first) sb.append(", ");
    sb.append("scratchDir:");
    if (this.scratchDir == null) {
      sb.append("null");
    } else {
      sb.append(this.scratchDir);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("loginId:");
    if (this.loginId == null) {
      sb.append("null");
    } else {
      sb.append(this.loginId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dtProtocol:");
    if (this.dtProtocol == null) {
      sb.append("null");
    } else {
      sb.append(this.dtProtocol);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("machineType:");
    if (this.machineType == null) {
      sb.append("null");
    } else {
      sb.append(this.machineType);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (hostname == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'hostname' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'port' because it's a primitive and you chose the non-beans generator.
    if (scratchDir == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scratchDir' was not present! Struct: " + toString());
    }
    if (loginId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'loginId' was not present! Struct: " + toString());
    }
    if (dtProtocol == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dtProtocol' was not present! Struct: " + toString());
    }
    if (machineType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'machineType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TargetMachineStandardSchemeFactory implements SchemeFactory {
    public TargetMachineStandardScheme getScheme() {
      return new TargetMachineStandardScheme();
    }
  }

  private static class TargetMachineStandardScheme extends StandardScheme<TargetMachine> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TargetMachine struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // HOSTNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.hostname = iprot.readString();
              struct.setHostnameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.port = iprot.readI32();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SCRATCH_DIR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.scratchDir = iprot.readString();
              struct.setScratchDirIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LOGIN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.loginId = iprot.readString();
              struct.setLoginIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DT_PROTOCOL
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.dtProtocol = org.apache.airavata.sga.commons.model.DataTransferProtocol.findByValue(iprot.readI32());
              struct.setDtProtocolIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MACHINE_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.machineType = org.apache.airavata.sga.commons.model.MachineType.findByValue(iprot.readI32());
              struct.setMachineTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetPort()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'port' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TargetMachine struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.hostname != null) {
        oprot.writeFieldBegin(HOSTNAME_FIELD_DESC);
        oprot.writeString(struct.hostname);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PORT_FIELD_DESC);
      oprot.writeI32(struct.port);
      oprot.writeFieldEnd();
      if (struct.scratchDir != null) {
        oprot.writeFieldBegin(SCRATCH_DIR_FIELD_DESC);
        oprot.writeString(struct.scratchDir);
        oprot.writeFieldEnd();
      }
      if (struct.loginId != null) {
        oprot.writeFieldBegin(LOGIN_ID_FIELD_DESC);
        oprot.writeString(struct.loginId);
        oprot.writeFieldEnd();
      }
      if (struct.dtProtocol != null) {
        oprot.writeFieldBegin(DT_PROTOCOL_FIELD_DESC);
        oprot.writeI32(struct.dtProtocol.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.machineType != null) {
        oprot.writeFieldBegin(MACHINE_TYPE_FIELD_DESC);
        oprot.writeI32(struct.machineType.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TargetMachineTupleSchemeFactory implements SchemeFactory {
    public TargetMachineTupleScheme getScheme() {
      return new TargetMachineTupleScheme();
    }
  }

  private static class TargetMachineTupleScheme extends TupleScheme<TargetMachine> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TargetMachine struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.hostname);
      oprot.writeI32(struct.port);
      oprot.writeString(struct.scratchDir);
      oprot.writeString(struct.loginId);
      oprot.writeI32(struct.dtProtocol.getValue());
      oprot.writeI32(struct.machineType.getValue());
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TargetMachine struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.hostname = iprot.readString();
      struct.setHostnameIsSet(true);
      struct.port = iprot.readI32();
      struct.setPortIsSet(true);
      struct.scratchDir = iprot.readString();
      struct.setScratchDirIsSet(true);
      struct.loginId = iprot.readString();
      struct.setLoginIdIsSet(true);
      struct.dtProtocol = org.apache.airavata.sga.commons.model.DataTransferProtocol.findByValue(iprot.readI32());
      struct.setDtProtocolIsSet(true);
      struct.machineType = org.apache.airavata.sga.commons.model.MachineType.findByValue(iprot.readI32());
      struct.setMachineTypeIsSet(true);
    }
  }

}

