/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package edu.iu.sga.gateway.api;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.3)", date = "2017-02-03")
public class ExperimentDM implements org.apache.thrift.TBase<ExperimentDM, ExperimentDM._Fields>, java.io.Serializable, Cloneable, Comparable<ExperimentDM> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ExperimentDM");

  private static final org.apache.thrift.protocol.TField EXPERIMENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField EXPERIMENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("experimentName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DATA_STAGE_DIRECTORY_FIELD_DESC = new org.apache.thrift.protocol.TField("dataStageDirectory", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OUTPUT_FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outputFileName", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new ExperimentDMStandardSchemeFactory());
    schemes.put(TupleScheme.class, new ExperimentDMTupleSchemeFactory());
  }

  public String experimentId; // required
  public String experimentName; // required
  public String status; // required
  public String dataStageDirectory; // required
  public String outputFileName; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    EXPERIMENT_ID((short)1, "experimentId"),
    EXPERIMENT_NAME((short)2, "experimentName"),
    STATUS((short)3, "status"),
    DATA_STAGE_DIRECTORY((short)4, "dataStageDirectory"),
    OUTPUT_FILE_NAME((short)5, "outputFileName");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EXPERIMENT_ID
          return EXPERIMENT_ID;
        case 2: // EXPERIMENT_NAME
          return EXPERIMENT_NAME;
        case 3: // STATUS
          return STATUS;
        case 4: // DATA_STAGE_DIRECTORY
          return DATA_STAGE_DIRECTORY;
        case 5: // OUTPUT_FILE_NAME
          return OUTPUT_FILE_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EXPERIMENT_ID, new org.apache.thrift.meta_data.FieldMetaData("experimentId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXPERIMENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("experimentName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DATA_STAGE_DIRECTORY, new org.apache.thrift.meta_data.FieldMetaData("dataStageDirectory", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTPUT_FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("outputFileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ExperimentDM.class, metaDataMap);
  }

  public ExperimentDM() {
  }

  public ExperimentDM(
    String experimentId,
    String experimentName,
    String status,
    String dataStageDirectory,
    String outputFileName)
  {
    this();
    this.experimentId = experimentId;
    this.experimentName = experimentName;
    this.status = status;
    this.dataStageDirectory = dataStageDirectory;
    this.outputFileName = outputFileName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public ExperimentDM(ExperimentDM other) {
    if (other.isSetExperimentId()) {
      this.experimentId = other.experimentId;
    }
    if (other.isSetExperimentName()) {
      this.experimentName = other.experimentName;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetDataStageDirectory()) {
      this.dataStageDirectory = other.dataStageDirectory;
    }
    if (other.isSetOutputFileName()) {
      this.outputFileName = other.outputFileName;
    }
  }

  public ExperimentDM deepCopy() {
    return new ExperimentDM(this);
  }

  @Override
  public void clear() {
    this.experimentId = null;
    this.experimentName = null;
    this.status = null;
    this.dataStageDirectory = null;
    this.outputFileName = null;
  }

  public String getExperimentId() {
    return this.experimentId;
  }

  public ExperimentDM setExperimentId(String experimentId) {
    this.experimentId = experimentId;
    return this;
  }

  public void unsetExperimentId() {
    this.experimentId = null;
  }

  /** Returns true if field experimentId is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentId() {
    return this.experimentId != null;
  }

  public void setExperimentIdIsSet(boolean value) {
    if (!value) {
      this.experimentId = null;
    }
  }

  public String getExperimentName() {
    return this.experimentName;
  }

  public ExperimentDM setExperimentName(String experimentName) {
    this.experimentName = experimentName;
    return this;
  }

  public void unsetExperimentName() {
    this.experimentName = null;
  }

  /** Returns true if field experimentName is set (has been assigned a value) and false otherwise */
  public boolean isSetExperimentName() {
    return this.experimentName != null;
  }

  public void setExperimentNameIsSet(boolean value) {
    if (!value) {
      this.experimentName = null;
    }
  }

  public String getStatus() {
    return this.status;
  }

  public ExperimentDM setStatus(String status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public String getDataStageDirectory() {
    return this.dataStageDirectory;
  }

  public ExperimentDM setDataStageDirectory(String dataStageDirectory) {
    this.dataStageDirectory = dataStageDirectory;
    return this;
  }

  public void unsetDataStageDirectory() {
    this.dataStageDirectory = null;
  }

  /** Returns true if field dataStageDirectory is set (has been assigned a value) and false otherwise */
  public boolean isSetDataStageDirectory() {
    return this.dataStageDirectory != null;
  }

  public void setDataStageDirectoryIsSet(boolean value) {
    if (!value) {
      this.dataStageDirectory = null;
    }
  }

  public String getOutputFileName() {
    return this.outputFileName;
  }

  public ExperimentDM setOutputFileName(String outputFileName) {
    this.outputFileName = outputFileName;
    return this;
  }

  public void unsetOutputFileName() {
    this.outputFileName = null;
  }

  /** Returns true if field outputFileName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutputFileName() {
    return this.outputFileName != null;
  }

  public void setOutputFileNameIsSet(boolean value) {
    if (!value) {
      this.outputFileName = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case EXPERIMENT_ID:
      if (value == null) {
        unsetExperimentId();
      } else {
        setExperimentId((String)value);
      }
      break;

    case EXPERIMENT_NAME:
      if (value == null) {
        unsetExperimentName();
      } else {
        setExperimentName((String)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((String)value);
      }
      break;

    case DATA_STAGE_DIRECTORY:
      if (value == null) {
        unsetDataStageDirectory();
      } else {
        setDataStageDirectory((String)value);
      }
      break;

    case OUTPUT_FILE_NAME:
      if (value == null) {
        unsetOutputFileName();
      } else {
        setOutputFileName((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case EXPERIMENT_ID:
      return getExperimentId();

    case EXPERIMENT_NAME:
      return getExperimentName();

    case STATUS:
      return getStatus();

    case DATA_STAGE_DIRECTORY:
      return getDataStageDirectory();

    case OUTPUT_FILE_NAME:
      return getOutputFileName();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case EXPERIMENT_ID:
      return isSetExperimentId();
    case EXPERIMENT_NAME:
      return isSetExperimentName();
    case STATUS:
      return isSetStatus();
    case DATA_STAGE_DIRECTORY:
      return isSetDataStageDirectory();
    case OUTPUT_FILE_NAME:
      return isSetOutputFileName();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof ExperimentDM)
      return this.equals((ExperimentDM)that);
    return false;
  }

  public boolean equals(ExperimentDM that) {
    if (that == null)
      return false;

    boolean this_present_experimentId = true && this.isSetExperimentId();
    boolean that_present_experimentId = true && that.isSetExperimentId();
    if (this_present_experimentId || that_present_experimentId) {
      if (!(this_present_experimentId && that_present_experimentId))
        return false;
      if (!this.experimentId.equals(that.experimentId))
        return false;
    }

    boolean this_present_experimentName = true && this.isSetExperimentName();
    boolean that_present_experimentName = true && that.isSetExperimentName();
    if (this_present_experimentName || that_present_experimentName) {
      if (!(this_present_experimentName && that_present_experimentName))
        return false;
      if (!this.experimentName.equals(that.experimentName))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_dataStageDirectory = true && this.isSetDataStageDirectory();
    boolean that_present_dataStageDirectory = true && that.isSetDataStageDirectory();
    if (this_present_dataStageDirectory || that_present_dataStageDirectory) {
      if (!(this_present_dataStageDirectory && that_present_dataStageDirectory))
        return false;
      if (!this.dataStageDirectory.equals(that.dataStageDirectory))
        return false;
    }

    boolean this_present_outputFileName = true && this.isSetOutputFileName();
    boolean that_present_outputFileName = true && that.isSetOutputFileName();
    if (this_present_outputFileName || that_present_outputFileName) {
      if (!(this_present_outputFileName && that_present_outputFileName))
        return false;
      if (!this.outputFileName.equals(that.outputFileName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_experimentId = true && (isSetExperimentId());
    list.add(present_experimentId);
    if (present_experimentId)
      list.add(experimentId);

    boolean present_experimentName = true && (isSetExperimentName());
    list.add(present_experimentName);
    if (present_experimentName)
      list.add(experimentName);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status);

    boolean present_dataStageDirectory = true && (isSetDataStageDirectory());
    list.add(present_dataStageDirectory);
    if (present_dataStageDirectory)
      list.add(dataStageDirectory);

    boolean present_outputFileName = true && (isSetOutputFileName());
    list.add(present_outputFileName);
    if (present_outputFileName)
      list.add(outputFileName);

    return list.hashCode();
  }

  @Override
  public int compareTo(ExperimentDM other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetExperimentId()).compareTo(other.isSetExperimentId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentId, other.experimentId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetExperimentName()).compareTo(other.isSetExperimentName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExperimentName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.experimentName, other.experimentName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDataStageDirectory()).compareTo(other.isSetDataStageDirectory());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDataStageDirectory()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataStageDirectory, other.dataStageDirectory);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOutputFileName()).compareTo(other.isSetOutputFileName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutputFileName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outputFileName, other.outputFileName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("ExperimentDM(");
    boolean first = true;

    sb.append("experimentId:");
    if (this.experimentId == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("experimentName:");
    if (this.experimentName == null) {
      sb.append("null");
    } else {
      sb.append(this.experimentName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("dataStageDirectory:");
    if (this.dataStageDirectory == null) {
      sb.append("null");
    } else {
      sb.append(this.dataStageDirectory);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outputFileName:");
    if (this.outputFileName == null) {
      sb.append("null");
    } else {
      sb.append(this.outputFileName);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class ExperimentDMStandardSchemeFactory implements SchemeFactory {
    public ExperimentDMStandardScheme getScheme() {
      return new ExperimentDMStandardScheme();
    }
  }

  private static class ExperimentDMStandardScheme extends StandardScheme<ExperimentDM> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, ExperimentDM struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EXPERIMENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentId = iprot.readString();
              struct.setExperimentIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EXPERIMENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.experimentName = iprot.readString();
              struct.setExperimentNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.status = iprot.readString();
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DATA_STAGE_DIRECTORY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dataStageDirectory = iprot.readString();
              struct.setDataStageDirectoryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTPUT_FILE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outputFileName = iprot.readString();
              struct.setOutputFileNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, ExperimentDM struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.experimentId != null) {
        oprot.writeFieldBegin(EXPERIMENT_ID_FIELD_DESC);
        oprot.writeString(struct.experimentId);
        oprot.writeFieldEnd();
      }
      if (struct.experimentName != null) {
        oprot.writeFieldBegin(EXPERIMENT_NAME_FIELD_DESC);
        oprot.writeString(struct.experimentName);
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeString(struct.status);
        oprot.writeFieldEnd();
      }
      if (struct.dataStageDirectory != null) {
        oprot.writeFieldBegin(DATA_STAGE_DIRECTORY_FIELD_DESC);
        oprot.writeString(struct.dataStageDirectory);
        oprot.writeFieldEnd();
      }
      if (struct.outputFileName != null) {
        oprot.writeFieldBegin(OUTPUT_FILE_NAME_FIELD_DESC);
        oprot.writeString(struct.outputFileName);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class ExperimentDMTupleSchemeFactory implements SchemeFactory {
    public ExperimentDMTupleScheme getScheme() {
      return new ExperimentDMTupleScheme();
    }
  }

  private static class ExperimentDMTupleScheme extends TupleScheme<ExperimentDM> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, ExperimentDM struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetExperimentId()) {
        optionals.set(0);
      }
      if (struct.isSetExperimentName()) {
        optionals.set(1);
      }
      if (struct.isSetStatus()) {
        optionals.set(2);
      }
      if (struct.isSetDataStageDirectory()) {
        optionals.set(3);
      }
      if (struct.isSetOutputFileName()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetExperimentId()) {
        oprot.writeString(struct.experimentId);
      }
      if (struct.isSetExperimentName()) {
        oprot.writeString(struct.experimentName);
      }
      if (struct.isSetStatus()) {
        oprot.writeString(struct.status);
      }
      if (struct.isSetDataStageDirectory()) {
        oprot.writeString(struct.dataStageDirectory);
      }
      if (struct.isSetOutputFileName()) {
        oprot.writeString(struct.outputFileName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, ExperimentDM struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.experimentId = iprot.readString();
        struct.setExperimentIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.experimentName = iprot.readString();
        struct.setExperimentNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.status = iprot.readString();
        struct.setStatusIsSet(true);
      }
      if (incoming.get(3)) {
        struct.dataStageDirectory = iprot.readString();
        struct.setDataStageDirectoryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outputFileName = iprot.readString();
        struct.setOutputFileNameIsSet(true);
      }
    }
  }

}

